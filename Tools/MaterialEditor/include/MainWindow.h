
#pragma once

#include "Autogenerated/MaterialEditorBaseAutogen.h"
#include "Core/wxOgreRenderWindowListener.h"

#include "MaterialEditorCommon.h"
#include "UndoSystem.h"

#include "OgreFrameListener.h"

struct CmdSettings;
class DatablockList;
class LightPanel;
class MeshList;
class PbsParametersPanel;
class PbsTexturePanel;
class ProjectSettings;
class wxAuiManager;
class wxAuiNotebook;
class wxOgreRenderWindow;

OGRE_ASSUME_NONNULL_BEGIN

class MainWindow final : public MainWindowBase,
                         public wxOgreRenderWindowListener,
                         public Ogre::FrameListener
{
    // Directory where we have write access to write our settings
    std::string m_writeAccessFolder;

    Ogre::Root                *m_root;
    Ogre::SceneManager        *m_sceneManager;
    Ogre::Camera              *m_camera;
    Ogre::SceneNode           *m_cameraNode;
    Ogre::CompositorWorkspace *m_workspace;

    wxOgreRenderWindow *m_wxOgreRenderWindow;

    UndoSystem m_undoSystem;

    wxAuiManager *m_wxAuiManager;

    wxAuiNotebook      *m_mainNotebook;
    wxAuiNotebook      *m_mainNotebook2;
    PbsParametersPanel *m_pbsParametersPanel;
    PbsTexturePanel    *m_pbsTexturePanel;
    LightPanel         *m_lightPanel;
    DatablockList      *m_datablockList;
    MeshList           *m_meshList;
    ProjectSettings    *m_projectSettings;

    Ogre::HlmsDatablock *ogre_nullable m_activeDatablock;

    Ogre::Item *ogre_nullable       m_activeItem;
    Ogre::v1::Entity *ogre_nullable m_activeEntity;
    Ogre::SceneNode                *m_objSceneNode;

    // Control camera movement through mouse.
    CoordinateConvention::CoordinateConvention m_coordinateConvention;
    int32_t m_mouseX;  // wxWidgets doesn't send us delta, so we have to save last
    int32_t m_mouseY;  // event's data and calculate delta ourselves.
    bool    m_wasLeftPressed;
    bool    m_wasRightPressed;

    bool m_useMicrocodeCache;
    bool m_useHlmsDiskCache;

    /// Loads user settings from a file (if exists).
    /// Assumes the values are already defaulted (in case settings file wasn't found).
    void loadSettings();

    /// Initializes Ogre and the control that renders it.
    void initOgre( bool bForceSetup );

    /// Creates Ogre secondary stuff like cameras and scene managers.
    void createSystems();

    void addResourceLocation( const Ogre::String &archName, const Ogre::String &typeName,
                              const Ogre::String &secName );

    /// Adds and initializes Ogre resource locations.
    void loadResources();

    /// Registers Hlms.
    void registerHlms();
    void loadHlmsDiskCache();
    void saveHlmsDiskCache();

    void unloadForNewProject();

    bool loadMeshAsItem( const Ogre::String &meshName, const Ogre::String &resourceGroup );
    bool loadMeshAsV1Entity( const Ogre::String &meshName, const Ogre::String &resourceGroup );

    /** Sets the new coordinate convention to all relevant nodes, and sets the GUI checked properly.
    @param newConvention
        New convention.
    */
    void setCoordinateConvention( CoordinateConvention::CoordinateConvention newConvention );

    /// Defaults camera position to 0, centerY, 0, with the default angle, making it look to the model as
    /// a whole. If no model is loaded, it redirects to originCamera().
    void originCenterYCamera();

    /// Defaults camera position to 0, 0, 0, with the default angle.
    void originCamera();

    /// Like defaultCamera(), but pointing at the center of the mesh. Does nothing if there's not mesh.
    void centerMeshCamera();

    /** Manipulates the yaw and pitch of the camera, around and relative to the center of the mesh,
        when the mouse is moved.
    @param x
        X delta, in pixels.
    @param y
        Y delta, in pixels.
    */
    void rotateCamera( const int32_t x, const int32_t y );

    /**
    @param wheelDelta
        Z delta.
    */
    void zoomInCamera( const Ogre::Real wheelDelta );

    /** Moves the whole camera among the relative X and Y axis
    @param x
        X delta, in pixels.
    @param y
        Y delta, in pixels.
    */
    void moveCamera( const int32_t x, const int32_t y );

    /** Moves the whole camera among the relative X and Z axis.
    @remarks
        slideCamera( x, 0 ) == moveCamera( x, 0 ).
    @param x
        X delta, in pixels.
    @param z
        Z delta, in pixels.
    */
    void slideCamera( const int32_t x, const int32_t z );

public:
    MainWindow( wxWindow *ogre_nullable parent, const CmdSettings &cmdSettings );
    ~MainWindow() override;

    bool frameStarted( const Ogre::FrameEvent &evt ) override;

    void OnMouseEvents( wxMouseEvent &evt ) override;
    void OnKeyDown( wxKeyEvent &evt ) override;
    void OnKeyUp( wxKeyEvent &evt ) override;

    void OnMenuSelection( wxCommandEvent &event ) override;

    UndoSystem &getUndoSystem() { return m_undoSystem; }

    Ogre::Root                *getRoot() { return m_root; }
    Ogre::SceneManager        *getSceneManager() { return m_sceneManager; }
    Ogre::CompositorWorkspace *getCompositorWorkspace() { return m_workspace; }

    Ogre::SceneNode *getCameraNode() { return m_cameraNode; }

    PbsParametersPanel *getPbsParametersPanel() { return m_pbsParametersPanel; }

    void setActiveDatablock( Ogre::HlmsDatablock *ogre_nullable datablock,
                             const bool                         bUpdateDatablockListSelection = true );
    void setActiveMesh( const Ogre::String &meshName, const Ogre::String &resourceGroup );

    Ogre::MovableObject *ogre_nullable getActiveObject();

    Ogre::Item *ogre_nullable       getActiveItem() { return m_activeItem; }
    Ogre::v1::Entity *ogre_nullable getActiveEntity() { return m_activeEntity; }

    const Ogre::String &getOriginalMaterialNameForActiveObject( const size_t submeshIdx ) const;
    const Ogre::String &getActiveMeshResourceGroup() const;

    Ogre::HlmsDatablock *ogre_nullable getActiveDatablock() { return m_activeDatablock; }
};

OGRE_ASSUME_NONNULL_END
