
#pragma once

#include "Autogenerated/MaterialEditorBaseAutogen.h"
#include "Core/wxOgreRenderWindowListener.h"

#include "MaterialEditorCommon.h"

#include "OgreFrameListener.h"

struct CmdSettings;
class DatablockList;
class MeshList;
class PbsParametersPanel;
class PbsTexturePanel;
class ProjectSettings;
class wxAuiManager;
class wxAuiNotebook;
class wxOgreRenderWindow;

OGRE_ASSUME_NONNULL_BEGIN

class MainWindow final : public MainWindowBase,
                         public wxOgreRenderWindowListener,
                         public Ogre::FrameListener
{
    // Directory where we have write access to write our settings
    std::string m_writeAccessFolder;

    Ogre::Root                *m_root;
    Ogre::SceneManager        *m_sceneManager;
    Ogre::Camera              *m_camera;
    Ogre::SceneNode           *m_cameraNode;
    Ogre::CompositorWorkspace *m_workspace;

    wxOgreRenderWindow *m_wxOgreRenderWindow;

    wxAuiManager *m_wxAuiManager;

    wxAuiNotebook      *m_mainNotebook;
    wxAuiNotebook      *m_mainNotebook2;
    PbsParametersPanel *m_pbsParametersPanel;
    PbsTexturePanel    *m_pbsTexturePanel;
    DatablockList      *m_datablockList;
    MeshList           *m_meshList;
    ProjectSettings    *m_projectSettings;

    Ogre::HlmsDatablock *ogre_nullable m_activeDatablock;

    Ogre::Item *ogre_nullable       m_activeItem;
    Ogre::v1::Entity *ogre_nullable m_activeEntity;
    Ogre::SceneNode                *m_objSceneNode;

    bool m_useMicrocodeCache;
    bool m_useHlmsDiskCache;

    /// Loads user settings from a file (if exists).
    /// Assumes the values are already defaulted (in case settings file wasn't found).
    void loadSettings();

    /// Initializes Ogre and the control that renders it.
    void initOgre( bool bForceSetup );

    /// Creates Ogre secondary stuff like cameras and scene managers.
    void createSystems();

    void addResourceLocation( const Ogre::String &archName, const Ogre::String &typeName,
                              const Ogre::String &secName );

    /// Adds and initializes Ogre resource locations.
    void loadResources();

    /// Registers Hlms.
    void registerHlms();
    void loadHlmsDiskCache();
    void saveHlmsDiskCache();

    void unloadForNewProject();

    bool loadMeshAsItem( const Ogre::String &meshName, const Ogre::String &resourceGroup );
    bool loadMeshAsV1Entity( const Ogre::String &meshName, const Ogre::String &resourceGroup );

public:
    MainWindow( wxWindow *ogre_nullable parent, const CmdSettings &cmdSettings );
    ~MainWindow() override;

    bool frameStarted( const Ogre::FrameEvent &evt ) override;

    void OnMouseEvents( wxMouseEvent &evt ) override;
    void OnKeyDown( wxKeyEvent &evt ) override;
    void OnKeyUp( wxKeyEvent &evt ) override;

    void OnMenuSelection( wxCommandEvent &event ) override;

    Ogre::Root *getRoot() { return m_root; }

    void setActiveDatablock( Ogre::HlmsDatablock *ogre_nullable datablock );
    void setActiveMesh( const Ogre::String &meshName, const Ogre::String &resourceGroup );

    Ogre::MovableObject *ogre_nullable getActiveObject();

    const Ogre::String &getOriginalMaterialNameForActiveObject( const size_t submeshIdx ) const;
    const Ogre::String &getActiveMeshResourceGroup() const;

    Ogre::HlmsDatablock *ogre_nullable getActiveDatablock() { return m_activeDatablock; }
};

OGRE_ASSUME_NONNULL_END
