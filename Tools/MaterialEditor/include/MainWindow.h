
#pragma once

#include "Autogenerated/MaterialEditorBaseAutogen.h"
#include "Core/wxOgreRenderWindowListener.h"

#include "OgrePrerequisites.h"

#include "OgreFrameListener.h"

struct CmdSettings;
class PbsParametersPanel;
class wxAuiManager;
class wxAuiNotebook;
class wxOgreRenderWindow;

OGRE_ASSUME_NONNULL_BEGIN

class MainWindow final : public MainWindowBase,
                         public wxOgreRenderWindowListener,
                         public Ogre::FrameListener
{
    // Directory where we have write access to write our settings
    std::string m_writeAccessFolder;

    Ogre::Root                *m_root;
    Ogre::SceneManager        *m_sceneManager;
    Ogre::Camera              *m_camera;
    Ogre::CompositorWorkspace *m_workspace;

    wxOgreRenderWindow *m_wxOgreRenderWindow;

    wxAuiManager *m_wxAuiManager;

    wxAuiNotebook      *m_mainNotebook;
    PbsParametersPanel *m_pbsParametersPanel;

    Ogre::HlmsDatablock *ogre_nullable m_activeDatablock;

    bool m_useMicrocodeCache;
    bool m_useHlmsDiskCache;

    /// Loads user settings from a file (if exists).
    /// Assumes the values are already defaulted (in case settings file wasn't found).
    void loadSettings();

    /// Initializes Ogre and the control that renders it.
    void initOgre( bool bForceSetup );

    /// Creates Ogre secondary stuff like cameras and scene managers.
    void createSystems();

    void addResourceLocation( const Ogre::String &archName, const Ogre::String &typeName,
                              const Ogre::String &secName );

    /// Adds and initializes Ogre resource locations.
    void loadResources();

    /// Registers Hlms.
    void registerHlms();
    void loadHlmsDiskCache();
    void saveHlmsDiskCache();

public:
    MainWindow( wxWindow *parent, const CmdSettings &cmdSettings );
    ~MainWindow() override;

    bool frameStarted( const Ogre::FrameEvent &evt ) override;

    void OnMouseEvents( wxMouseEvent &evt ) override;
    void OnKeyDown( wxKeyEvent &evt ) override;
    void OnKeyUp( wxKeyEvent &evt ) override;

    Ogre::HlmsDatablock *ogre_nullable getActiveDatablock() const { return m_activeDatablock; }
};

OGRE_ASSUME_NONNULL_END
