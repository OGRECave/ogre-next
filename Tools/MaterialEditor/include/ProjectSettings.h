
#pragma once

#include "Autogenerated/MaterialEditorBaseAutogen.h"

#include "MaterialEditorCommon.h"

#include "OgreHlmsJson.h"

OGRE_ASSUME_NONNULL_BEGIN

class MainWindow;

typedef std::map<Ogre::String, std::set<Ogre::String>> GroupedDatablockMap;

class ProjectSettings final : public ProjectSettingsBase, public Ogre::HlmsJsonListener
{
    bool m_editing;

    wxString m_lastOpenDir;

    wxArrayString m_resources;
    wxString      m_relativeFolder;
    wxString      m_materialDstPath;
    wxString      m_projectPath;

    struct ResourceLocation
    {
        Ogre::String name;
        Ogre::String group;
    };

    std::vector<ResourceLocation> m_resourceLocations;

    NamedSamplerVec m_samplerTemplates;

    Ogre::String        m_currentGroupSaving;
    GroupedDatablockMap m_groupedDatablocks;

    void generateDefaultSamplerTemplates();

protected:
    // Handlers for ProjectSettingsBase events.
    void OnResourcesAdd( wxCommandEvent &event ) override;
    void OnResourcesFolderAdd( wxCommandEvent &event ) override;
    void OnResourcesRemove( wxCommandEvent &event ) override;
    void OnText( wxCommandEvent &event ) override;
    void OnBrowseFolder( wxCommandEvent &event ) override;
    void OnBrowse( wxCommandEvent &event ) override;
    void OnButtonClick( wxCommandEvent &event ) override;

    bool validateSettings();
    void syncSettingsFromUI();

    void loadProject( Ogre::HlmsManager *hlmsManager );

public:
    ProjectSettings( wxWindow *parent );

    int ShowModal() override;

    void newProject( Ogre::HlmsManager *hlmsManager );

    void openProject( wxString projectPath, Ogre::HlmsManager *hlmsManager, LightPanel &lightPanel );

    wxString openProjectModal();

    void saveProject( Ogre::HlmsManager *hlmsManager, LightPanel &lightPanel );

    void loadInternalSettings( const std::string &rwFolder );
    void saveInternalSettings( const std::string &rwFolder );

    NamedSamplerVec &getSamplerTemplates() { return m_samplerTemplates; }

    GroupedDatablockMap &getGroupedDatablocks() { return m_groupedDatablocks; }

    void addToCategoryGroup( const Ogre::String &groupName, const Ogre::String &datablockName );
    void removeFromCategoryGroup( const Ogre::String &groupName, const Ogre::String &datablockName );

    bool isDatablockGroupless( const Ogre::String &name ) const;

    bool canSaveDatablock( const Ogre::HlmsDatablock *datablock ) const override;
};

OGRE_ASSUME_NONNULL_END
