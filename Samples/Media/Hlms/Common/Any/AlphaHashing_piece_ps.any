
// #include "SyntaxHighlightingMisc.h"

@property( hlms_alpha_hash )

@piece( DeclAlphaHashFuncs )

@property( !hlms_blue_noise )
	// Use ALU-based white noise if the blue noise texture is not available.
	INLINE uint AlphaHashWang( uint seed )
	{
		seed = ( seed ^ 61u ) ^ ( seed >> 16u );
		seed *= 9u;
		seed = seed ^ ( seed >> 4u );
		seed *= 0x27d4eb2du;
		seed = seed ^ ( seed >> 15u );
		return seed;
	}

	INLINE float AlphaHashWangFP2D( float2 p )
	{
		uint seed = floatBitsToUint( p.x ) ^ floatBitsToUint( p.y * 59.0 + 11.0 );
		seed = AlphaHashWang( seed );
		return ( float( seed ) ) * ( 1.0 / 4294967296.0 );
	}
@end

	@property( syntax == metal && hlms_blue_noise )
		#define ALPHA_HASHING_ARG_DECL , texture2d_array<float> blueNoiseTex
		#define ALPHA_HASHING_ARG , blueNoiseTex
	@else
		#define ALPHA_HASHING_ARG_DECL
		#define ALPHA_HASHING_ARG
	@end

@property( hlms_alpha_to_coverage )
	INLINE float AlphaHashReject( float _alpha, float2 vPos ALPHA_HASHING_ARG_DECL )
@else
	INLINE bool AlphaHashReject( float _alpha, float2 vPos ALPHA_HASHING_ARG_DECL )
@end
{
	@property( hlms_blue_noise )
		const float g_HashScale = 1.5f;
	@else
		const float g_HashScale = 1.0f;
	@end

	// Formula taken from Hashed Alpha Testing, Chris Wyman & Morgan McGuire
	// Find the discretized derivatives of our coordinates
	const float maxDeriv = max( length( OGRE_ddx( vPos.xy ) ), length( OGRE_ddx( vPos.xy ) ) );
	const float pixScale = 1.0f / ( g_HashScale * maxDeriv );
	// Find two nearest log-discretized noise scales
	const float2 pixScales = float2( exp2( floor( log2( pixScale ) ) ), exp2( ceil( log2( pixScale ) ) ) );
	// Compute alpha thresholds at our two noise scales
	@property( hlms_blue_noise )
		const float2 alpha = float2(
			OGRE_LoadArray2D( blueNoiseTex, mod( floor( pixScales.x * vPos.xy ), 64.0f ), 0, 0 ).x,
			OGRE_LoadArray2D( blueNoiseTex, mod( floor( pixScales.y * vPos.xy ) + 1, 64.0f ), 0, 0 ).x );
	@else
		const float2 alpha = float2( AlphaHashWangFP2D( floor( pixScales.x * vPos.xy ) ),
									 AlphaHashWangFP2D( floor( pixScales.y * vPos.xy ) ) );
	@end

	// Factor to interpolate lerp with
	const float lerpFactor = fract( log2( pixScale ) );
	// Interpolate alpha threshold from noise at two scales
	const float x = ( 1 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
	// Pass into CDF to compute uniformly distrib threshold
	float a = min( lerpFactor, 1 - lerpFactor );
	const float3 cases = float3( x * x / ( 2 * a * ( 1 - a ) ), ( x - 0.5 * a ) / ( 1 - a ),
								 1.0f - ( ( 1 - x ) * ( 1 - x ) / ( 2 * a * ( 1 - a ) ) ) );
	// Find our final, uniformly distributed alpha threshold
	float alphaThreshold = ( x < ( 1 - a ) ) ? ( ( x < a ) ? cases.x : cases.y ) : cases.z;
	// Avoids alphaThreshold == 0.
	alphaThreshold = clamp( alphaThreshold, 1.0e-6f, 1.0 );

	@property( hlms_alpha_to_coverage )
		return lerp( max( ( _alpha - alphaThreshold ), 0.0f ), 1.0f, _alpha );
	@else
		return _alpha < alphaThreshold;
	@end
}
@end /// DeclAlphaHashFuncs

@end /// hlms_alpha_hash
