//Reset t to 0 just in case (values are preserved from previous stages)
@pset( t, 0 )

@piece( NormalNonPremul )
	//Normal Non Premultiplied @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz, topImage@value(t).xyz, topImage@value(t).a );
	diffuseCol.w = lerp( diffuseCol.w, _h( 1.0 ), topImage@value(t).w );
@end

@piece( NormalPremul )
	//Normal Premultiplied @counter(t)
	diffuseCol.xyz = (_h( 1.0 ) - topImage@value(t).a) * diffuseCol.xyz + topImage@value(t).xyz;
	diffuseCol.w = lerp( diffuseCol.w, _h( 1.0 ), topImage@value(t).w );
@end

@piece( Add )
	//Add @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   min( diffuseCol.xyz + topImage@value(t).xyz, midf3_c(1.0,1.0,1.0) ),
						   topImage@value(t).a );
@end

@piece( Subtract )
	//Subtract @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   max( diffuseCol.xyz - topImage@value(t).xyz, midf3_c(0.0,0.0,0.0) ),
						   topImage@value(t).a );
@end

@piece( Multiply )
	//Multiply @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   diffuseCol.xyz * topImage@value(t).xyz,
						   topImage@value(t).a );
@end

@piece( Multiply2x )
	//Multiply2x @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   min( diffuseCol.xyz * topImage@value(t).xyz * _h( 2.0 ), midf3_c(1.0,1.0,1.0) ),
						   topImage@value(t).a );
@end

@piece( Screen )
	//Screen @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   _h( 1.0 ) - (_h( 1.0 ) - diffuseCol.xyz) * (_h( 1.0 ) - topImage@value(t).xyz),
						   topImage@value(t).a );
@end

@piece( Overlay )
	//Overlay @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   diffuseCol.xyz * ( diffuseCol.xyz + _h( 2.0 ) * topImage@value(t).xyz * (_h( 1.0 ) - diffuseCol.xyz) ),
						   topImage@value(t).a );
@end

@piece( Lighten )
	//Lighten @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   max( diffuseCol.xyz, topImage@value(t).xyz ),
						   topImage@value(t).a );
@end

@piece( Darken )
	//Darken @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   min( diffuseCol.xyz, topImage@value(t).xyz ),
						   topImage@value(t).a );
@end

@piece( GrainExtract )
	//GrainExtract @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   (diffuseCol.xyz - topImage@value(t).xyz) + _h( 0.5f ),
						   topImage@value(t).a );
@end

@piece( GrainMerge )
	//GrainMerge @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   (diffuseCol.xyz + topImage@value(t).xyz) - _h( 0.5f ),
						   topImage@value(t).a );
@end

@piece( Difference )
	//Difference @counter(t)
	diffuseCol.xyz = lerp( diffuseCol.xyz,
						   abs(diffuseCol.xyz - topImage@value(t).xyz),
						   topImage@value(t).a );
@end
