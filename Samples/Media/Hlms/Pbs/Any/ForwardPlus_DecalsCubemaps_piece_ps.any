//#include "SyntaxHighlightingMisc.h"

@property( hlms_forwardplus )

@property( hlms_enable_decals )
/// Perform decals *after* sampling the diffuse colour.
@piece( forwardPlusDoDecals )
	@insertpiece( forward3dHeader )

	@property( hlms_decals_normals && normal_map )
		midf3 finalDecalTsNormal = midf3_c( 0.0f, 0.0f, 1.0f );
	@end
	@property( hlms_decals_emissive )
		midf3 finalDecalEmissive = midf3_c( 0.0f, 0.0f, 0.0f );
	@end

	ushort numLightsInGrid = bufferFetch1( f3dGrid, int(sampleOffset + @value(hlms_forwardplus_decals_slot_offset)u) );

	@property( hlms_forwardplus_debug )totalNumLightsInGrid += numLightsInGrid;@end

	float3 posDdx = OGRE_ddx( inPs.pos.xyz );
	float3 posDdy = OGRE_ddy( inPs.pos.xyz );

	for( uint i=0u; i<numLightsInGrid; ++i )
	{
		//Get the light index
		uint idx = bufferFetch1( f3dGrid, int(sampleOffset + i + @value(hlms_forwardplus_decals_slot_offset)u + 1u) );

		float4 invWorldView0	= readOnlyFetch( f3dLightList, int(idx) ).xyzw;
		float4 invWorldView1	= readOnlyFetch( f3dLightList, int(idx + 1u) ).xyzw;
		float4 invWorldView2	= readOnlyFetch( f3dLightList, int(idx + 2u) ).xyzw;
		float4 texIndices		= readOnlyFetch( f3dLightList, int(idx + 3u) ).xyzw;

		float3 localPos;
		localPos.x = dot( invWorldView0.xyzw, float4( inPs.pos.xyz, 1.0f ) );
		localPos.y = dot( invWorldView1.xyzw, float4( inPs.pos.xyz, 1.0f ) );
		localPos.z = dot( invWorldView2.xyzw, float4( inPs.pos.xyz, 1.0f ) );

		float2 decalUvDdx;
		decalUvDdx.x = dot( invWorldView0.xyz, posDdx.xyz );
		decalUvDdx.y = dot( invWorldView2.xyz, posDdx.xyz );
		float2 decalUvDdy;
		decalUvDdy.x = dot( invWorldView0.xyz, posDdy.xyz );
		decalUvDdy.y = dot( invWorldView2.xyz, posDdy.xyz );

		float2 decalUV = localPos.xz + 0.5f;

		@property( hlms_decals_diffuse )
			ushort decalDiffuseIdx = floatBitsToUint( texIndices.x ) & 0xFFFFu;
			midf4 decalDiffuse = OGRE_SampleArray2DGradF16( decalsDiffuseTex, decalsSampler, decalUV.xy,
															decalDiffuseIdx, decalUvDdx, decalUvDdy ).xyzw;
		@end
		@property( hlms_decals_normals && normal_map )
			ushort decalNormalsIdx = floatBitsToUint( texIndices.x ) >> 16u;
			midf2 decalNormals = OGRE_SampleArray2DGradF16( decalsNormalsTex, decalsSampler, decalUV.xy,
															decalNormalsIdx, decalUvDdx, decalUvDdy ).xy;
		@end
		@property( hlms_decals_emissive )
			ushort decalEmissiveIdx = floatBitsToUint( texIndices.y ) & 0xFFFFu;
			midf3 decalEmissive = OGRE_SampleArray2DGradF16( decalsEmissiveTex, decalsSampler, decalUV.xy,
															 decalEmissiveIdx, decalUvDdx, decalUvDdy ).xyz;
		@end

		@property( hlms_decals_diffuse && (hlms_decals_normals || hlms_decals_emissive) )
			bool ignoreAlphaDiffuse = (floatBitsToUint( texIndices.y ) & 0xFFFF0000u) != 0u;
		@end

		//Mask the decal entirely if localPos is outside the debox
		float3 absLocalPos = abs( localPos.xyz );
		bool isOutsideDecal = absLocalPos.x > 0.5f || absLocalPos.y > 0.5f || absLocalPos.z > 0.5f;

		//Mask away objects looking away from the decal. Please note that inPs.normal is not unit-length
		//and is before any TBN for normal mapping. In other words it's the geometric normal
		//geomNormal is not available because it gets decalred after decals run
		//We assume invWorldView is orthogonal, thus the transpose = inverse, hance invWorldView1.xyz
		//works as the decal's direction
		//
		//Use a smooth fade to avoid flickering due to floating point precision when the normal
		//and the decal are perpendicular to each other. (tolerance set to 0.0002)
		midf3 decalDir = normalize( midf3_c( invWorldView1.xyz ) );
		//isOutsideDecal = dot( decalDir.xyz, inPs.normal.xyz ) <= 0.0 ? true : isOutsideDecal;
		midf normalAway = saturate( (dot( decalDir.xyz, inPs.normal.xyz ) + _h( 0.0002 ) ) / _h( 0.0002 ) );
		normalAway = isOutsideDecal ? _h( 0.0f ) : normalAway;

		midf decalMask = normalAway;

		@property( hlms_decals_diffuse )
			decalMask *= decalDiffuse.w;
			midf decalMetalness = midf_c( texIndices.z );
			midf3 decalF0 = lerp( midf3_c( 0.03f, 0.03f, 0.03f ), decalDiffuse.xyz, decalMetalness );
			decalDiffuse.xyz = decalDiffuse.xyz - decalDiffuse.xyz * decalMetalness;

			pixelData.diffuse.xyz	= lerp( pixelData.diffuse.xyz, decalDiffuse.xyz * _h( 0.318309886f ), decalMask );
			pixelData.roughness		= lerp( pixelData.roughness, midf_c( texIndices.w ), decalMask );

			@property( !metallic_workflow && !fresnel_workflow && !fresnel_scalar )
				pixelData.specular	= lerp( pixelData.specular.xyz, decalF0, decalMask );
				pixelData.F0		= lerp( pixelData.F0, decalMetalness, decalMask );
			@else
				pixelData.specular	= lerp( pixelData.specular.xyz, midf3_c( 1.0f, 1.0f, 1.0f ), decalMask );
				pixelData.F0.xyz	= lerp( pixelData.F0.xyz, decalF0.xyz, decalMask );
			@end

			@property( hlms_decals_normals || hlms_decals_emissive )
				//Reset the mask for the rest of the decal types to ignore our alpha
				decalMask = ignoreAlphaDiffuse ? normalAway : decalMask;
			@end
		@end
		@property( hlms_decals_normals && normal_map )
			finalDecalTsNormal.xy += decalNormals.xy * decalMask;
		@end
		@property( hlms_decals_emissive )
			finalDecalEmissive	+= (absLocalPos.x > 0.5f || absLocalPos.y > 0.5f ||
									absLocalPos.z > 0.5f) ? midf3_c( 0.0f, 0.0f, 0.0f ) :
															(decalEmissive.xyz * decalMask);
		@end

	}
@end /// forwardPlusDoDecals
	@property( hlms_decals_normals && normal_map )
		/// Apply decals normal *after* sampling the tangent space normals (and detail normals too).
		/// hlms_decals_normals will be unset if the Renderable cannot support normal maps (has no Tangents)
		@piece( forwardPlusApplyDecalsNormal )
			finalDecalTsNormal.xyz = normalize( finalDecalTsNormal.xyz );
			@property( normal_map_tex || detail_maps_normal )
				pixelData.normal.xy	+= finalDecalTsNormal.xy;
				pixelData.normal.z	*= finalDecalTsNormal.z;
			@end
			@property( !normal_map_tex && !detail_maps_normal )
				pixelData.normal.xyz = finalDecalTsNormal.xyz;
			@end
			//Do not normalize as later normalize( TBN * pixelData.normal ) will take care of it
		@end
	@end
@end /// hlms_enable_decals

@property( hlms_enable_cubemaps_auto )
@piece( forwardPlusDoCubemaps )
	numLightsInGrid = bufferFetch1( f3dGrid, int(sampleOffset + @value(hlms_forwardplus_cubemap_slot_offset)u) );

	@property( hlms_forwardplus_debug )totalNumLightsInGrid += numLightsInGrid;@end

	midf cubemapAccumWeight = _h( 0 );

	midf3 pccEnvS = midf3_c( 0, 0, 0 );
	midf3 pccEnvD = midf3_c( 0, 0, 0 );

	@property( clear_coat )
		midf3 clearCoatPccEnvS = midf3_c( 0, 0, 0 );
	@end

	@property( vct_num_probes )
	if( pixelData.roughness < 1.0f || vctSpecular.w == 0 )
	{
		float accumVctLerp = 0;
		float numProbesVctLerp = 0;
	@end
	for( uint i=0u; i<numLightsInGrid; ++i )
	{
		//Get the probe index
		uint idx = bufferFetch1( f3dGrid, int(sampleOffset + i + @value(hlms_forwardplus_cubemap_slot_offset)u + 1u) );

		CubemapProbe probe;

		probe.row0_centerX	= readOnlyFetch( f3dLightList, int(idx) ).xyzw;
		probe.row1_centerY	= readOnlyFetch( f3dLightList, int(idx + 1u) ).xyzw;
		probe.row2_centerZ	= readOnlyFetch( f3dLightList, int(idx + 2u) ).xyzw;
		probe.halfSize		= readOnlyFetch( f3dLightList, int(idx + 3u) ).xyzw;
		probe.cubemapPosLS	= readOnlyFetch( f3dLightList, int(idx + 4u) ).xyzw;
		probe.cubemapPosVS	= readOnlyFetch( f3dLightList, int(idx + 5u) ).xyzw;
		float4 probeInnerRange = readOnlyFetch( f3dLightList, int(idx + 6u) ).xyzw;
		float4 probeOuterRange = readOnlyFetch( f3dLightList, int(idx + 7u) ).xyzw;

		midf3 posInProbSpace = midf3_c( toProbeLocalSpace( inPs.pos, probe ) );
		midf probeFade = getProbeFade( posInProbSpace, probe );

		if( probeFade > _h( 0 ) )
		{
			float2 cubemapIdx_priority = unpackUshort2ToFloat2( floatBitsToUint( probe.halfSize.w ) );
			float probeCubemapIdx   = cubemapIdx_priority.x;
			float probePriority     = cubemapIdx_priority.y;

			midf3 probeToAreaCenterOffsetLS = midf3_c( probe.cubemapPosLS.w,
													   probe.cubemapPosVS.w,
													   probeInnerRange.w );
			midf ndf = getProbeNDF( posInProbSpace.xyz, probeToAreaCenterOffsetLS.xyz,
									midf3_c( probeInnerRange.xyz ), midf3_c( probeOuterRange.xyz ) );
			ndf = saturate( ndf );
			probeFade = _h( 1.0 ) - ndf;
			probeFade = probeFade * probeFade;
			probeFade = probeFade * probeFade;
			probeFade *= midf_c( probePriority );

			@property( vct_num_probes )
				midf4 reflDirLS_dist = localCorrect( pixelData.reflDir, posInProbSpace, probe );
				midf3 reflDirLS = reflDirLS_dist.xyz;
			@else
				midf3 reflDirLS = localCorrect( pixelData.reflDir, posInProbSpace, probe ).xyz;
			@end
			midf3 normalLS = localCorrect( pixelData.normal, posInProbSpace, probe ).xyz;

			midf4 pccSingleEnvS;

			@property( clear_coat )
				midf3 clearCoatPccSingleEnvS;
			@end

			@property( !hlms_cubemaps_use_dpm )
				pccSingleEnvS = OGRE_SampleArrayCubeLevelF16(
					texEnvProbeMap, samplerState@value(envMapRegSampler), float3( reflDirLS ),
					probeCubemapIdx, @insertpiece( envSpecularRoughness ) );
				@property( cubemaps_as_diffuse_gi )
					pccEnvD += OGRE_SampleArrayCubeLevelF16(
						texEnvProbeMap, samplerState@value(envMapRegSampler), normalLS,
						probeCubemapIdx, 11.0 ).xyz
						@insertpiece( ApplyEnvMapScale ) * probeFade;
				@end

				@property( clear_coat )
					clearCoatPccSingleEnvS = OGRE_SampleArrayCubeLevel( texEnvProbeMap, samplerState@value( envMapRegSampler ),
																		float3( reflDirLS ),
																		probeCubemapIdx,
																		@insertpiece( envSpecularRoughnessClearCoat ) ).xyz @insertpiece( ApplyEnvMapScale );
					clearCoatPccSingleEnvS *= probeFade;
				@end
			@else
				pccSingleEnvS = OGRE_SampleArray2DLevelF16(
					texEnvProbeMap, samplerState@value(envMapRegSampler), mapCubemapToDpm( reflDirLS ),
					probeCubemapIdx, @insertpiece( envSpecularRoughness ) );
				@property( cubemaps_as_diffuse_gi )
					pccEnvD += OGRE_SampleArray2DLevelF16(
						texEnvProbeMap, samplerState@value(envMapRegSampler), mapCubemapToDpm( normalLS ),
						probeCubemapIdx, 11.0 ).xyz
						@insertpiece( ApplyEnvMapScale ) * probeFade;
				@end

				@property( clear_coat )
					clearCoatPccSingleEnvS = OGRE_SampleArray2DLevelF16( texEnvProbeMap, samplerState@value( envMapRegSampler ),
																		 mapCubemapToDpm( reflDirLS ),
																		 probeCubemapIdx,
																		 @insertpiece( envSpecularRoughnessClearCoat ) ).xyz @insertpiece( ApplyEnvMapScale );
					clearCoatPccSingleEnvS *= probeFade;
				@end
			@end

			pccSingleEnvS.xyz *= probeFade;
			@property( envmap_scale )
				pccSingleEnvS.xyz *= midf_c( passBuf.ambientUpperHemi.w );
			@end

			@property( vct_num_probes )
				float vctLerp = getPccVctBlendWeight( inPs.pos, pixelData.reflDir, reflDirLS_dist.w,
													  pixelData.roughness,
													  probe.cubemapPosVS.xyz,
													  vctSpecPosVS, vctSpecular.w,
													  passBuf.pccVctMinDistance,
													  passBuf.invPccVctInvDistance,
													  pccSingleEnvS.w );

				pccSingleEnvS *= 1.0f - vctLerp;

				@property( clear_coat )
					clearCoatPccSingleEnvS *= 1.0f - vctLerp;
				@end

				accumVctLerp += 1.0f - vctLerp;
				numProbesVctLerp += 1.0f;
			@end

			pccEnvS	+= pccSingleEnvS.xyz;

			@property( clear_coat )
				clearCoatPccEnvS += clearCoatPccSingleEnvS;
			@end

			cubemapAccumWeight += probeFade;
		}
	}

	@property( cubemaps_as_diffuse_gi )
		pccEnvD.xyz *= cubemapAccumWeight == _h( 0.0f ) ? _h( 1.0f ) : (_h( 1.0f ) / cubemapAccumWeight);
	@end
	pccEnvS.xyz *= cubemapAccumWeight == _h( 0.0f ) ? _h( 1.0f ) : (_h( 1.0f ) / cubemapAccumWeight);

	@property( clear_coat )
		clearCoatPccEnvS *= cubemapAccumWeight == 0.0f ? 1.0f : ( 1.0f / cubemapAccumWeight );
	@end

	@property( vct_num_probes )
		numProbesVctLerp = numProbesVctLerp == 0.0f ? 1.0f : numProbesVctLerp;
		pixelData.envColourS.xyz = ( pccEnvS +
									 pixelData.envColourS * (numProbesVctLerp - accumVctLerp) ) /
								   numProbesVctLerp;
		@property( cubemaps_as_diffuse_gi )
			pixelData.envColourD += vctSpecular.w > 0 ? midf3_c( 0, 0, 0 ) : pccEnvD;
		@end

		@property( clear_coat )
			pixelData.clearCoatEnvColourS = ( clearCoatPccEnvS +
											  pixelData.clearCoatEnvColourS * ( numProbesVctLerp - accumVctLerp ) )
											/ numProbesVctLerp;
		@end
	@else
		pixelData.envColourS.xyz = pccEnvS;
		@property( cubemaps_as_diffuse_gi )
			pixelData.envColourD.xyz = pccEnvD;
		@end

		@property( clear_coat )
			pixelData.clearCoatEnvColourS = clearCoatPccEnvS;
		@end
	@end


	@property( vct_num_probes )
	}
	@end
@end
@end /// hlms_enable_cubemaps_auto

@end
