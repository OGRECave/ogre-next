
#include "/media/matias/Datos/SyntaxHighlightingMisc.h"

@property( hlms_screen_space_refractions )
@piece( DeclRefractionsFuncs )
	midf3 OGRE_refract( midf3 viewDir, midf3 normal, midf refractionIndex, midf NdotV )
	{
		midf3 retVal;
		midf k = _h( 1.0 ) - refractionIndex * refractionIndex * (_h( 1.0 ) - NdotV  * NdotV);
		if( k < _h( 0.0 ) )
			retVal = midf3_c( 0, 0, 0 );
		else
			retVal = -refractionIndex * viewDir - (sqrt( k ) - refractionIndex * NdotV) * normal;
		return retVal;
	}
@end

@piece( applyRefractions )
	@property( !fresnel_scalar )
		midf refractF0 = pixelData.F0;
	@else
		midf refractF0 = max( pixelData.F0.x, pixelData.F0.y, pixelData.F0.z );
	@end

	// refractNormal must be in view space, and we ignore .z component
	midf2 refractNormal2d = OGRE_refract( pixelData.viewDir, pixelData.normal,
										  refractF0, pixelData.NdotV ).xy;
	float2 refractUv = screenPosUv.xy + float2( refractNormal2d.xy ) *
					   float2( material.refractionStrength,
							   material.refractionStrength * passBuf.aspectRatio ) /
					   ( (-inPs.pos.z + 1.0) * (-inPs.pos.z + 1.0) );
	midf3 refractionCol = OGRE_SampleLevelF16( refractionMap, refractionMapSampler, refractUv, 0 ).xyz;
	midf refractionDepth = OGRE_SampleLevelF16( depthTextureNoMsaa, refractionMapSampler, refractUv, 0 ).x;

	// We may need to fallback to regular transparency if we're sampling to close to the edges
	// or the object being refracted is in front of us.
	midf3 fallbackRefractionCol = OGRE_Load2DF16( refractionMap, iFragCoord.xy, 0 ).xyz;

	refractUv = saturate( abs( screenPosUv.xy * 2.0 - 1.0 ) * 10.0 - 9.0 );
	midf fallbackRefrW = midf_c( max( refractUv.x, refractUv.y ) );
	fallbackRefrW = fallbackRefrW * fallbackRefrW;

	@property( hlms_no_reverse_depth )
		if( refractionDepth < gl_FragCoord.z - 0.025 )
	@else
		if( refractionDepth > gl_FragCoord.z + 0.025 )
	@end
		{
			// We're trying to refract an object that is in front of us. We can't do that.
			fallbackRefrW = _h( 1.0 );
		}

	refractionCol = lerp( refractionCol, fallbackRefractionCol, fallbackRefrW );

	@property( use_texture_alpha )
		midf refractionAlpha = midf_c( material.F0.w ) * pixelData.diffuse.w;
	@else
		midf refractionAlpha = midf_c( material.F0.w );
	@end

	finalColour += refractionCol.xyz * (_h( 1.0 ) - refractionAlpha);
@end
@end
