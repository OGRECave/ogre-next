/* Contains heavy code borrowed from https://github.com/selfshadow/ltc_code/

Original license:

Copyright (c) 2017, Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* If you use (or adapt) the source code in your own work, please include a
  reference to the paper:

  Real-Time Polygonal-Light Shading with Linearly Transformed Cosines.
  Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt.
  ACM Transactions on Graphics (Proceedings of ACM SIGGRAPH 2016) 35(4), 2016.
  Project page: https://eheitzresearch.wordpress.com/415-2/

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Adapted to Ogre by Matias N. Goldberg
*/

@property( hlms_lights_area_ltc )
@piece( DeclAreaLtcLightFuncs )
#define LUT_SIZE  64.0
#define LUT_SCALE ((LUT_SIZE - 1.0)/LUT_SIZE)
#define LUT_BIAS  (0.5/LUT_SIZE)

INLINE float3 IntegrateEdgeVec( float3 v1, float3 v2 )
{
	float x = dot(v1, v2);
	float y = abs(x);

	float a = 0.8543985 + (0.4965155 + 0.0145206*y)*y;
	float b = 3.4175940 + (4.1616724 + y)*y;
	float v = a / b;

	float theta_sintheta = (x > 0.0) ? v : 0.5*rsqrt(max(1.0 - x*x, 1e-7)) - v;

	return cross( v1, v2 ) * theta_sintheta;
}

INLINE float IntegrateEdge( float3 v1, float3 v2 )
{
	return IntegrateEdgeVec( v1, v2 ).z;
}

@property( syntax == metal )
INLINE void ClipQuadToHorizon( thread float3 L[5], thread int &n )
@end
@property( syntax != metal )
INLINE void ClipQuadToHorizon( inout float3 L[5], out int n )
@end
{
	// detect clipping config
	int config = 0;
	if (L[0].z > 0.0) config += 1;
	if (L[1].z > 0.0) config += 2;
	if (L[2].z > 0.0) config += 4;
	if (L[3].z > 0.0) config += 8;

	// clip
	n = 0;

	if (config == 0)
	{
		// clip all
	}
	else if (config == 1) // V1 clip V2 V3 V4
	{
		n = 3;
		L[1] = -L[1].z * L[0] + L[0].z * L[1];
		L[2] = -L[3].z * L[0] + L[0].z * L[3];
	}
	else if (config == 2) // V2 clip V1 V3 V4
	{
		n = 3;
		L[0] = -L[0].z * L[1] + L[1].z * L[0];
		L[2] = -L[2].z * L[1] + L[1].z * L[2];
	}
	else if (config == 3) // V1 V2 clip V3 V4
	{
		n = 4;
		L[2] = -L[2].z * L[1] + L[1].z * L[2];
		L[3] = -L[3].z * L[0] + L[0].z * L[3];
	}
	else if (config == 4) // V3 clip V1 V2 V4
	{
		n = 3;
		L[0] = -L[3].z * L[2] + L[2].z * L[3];
		L[1] = -L[1].z * L[2] + L[2].z * L[1];
	}
	else if (config == 5) // V1 V3 clip V2 V4) impossible
	{
		n = 0;
	}
	else if (config == 6) // V2 V3 clip V1 V4
	{
		n = 4;
		L[0] = -L[0].z * L[1] + L[1].z * L[0];
		L[3] = -L[3].z * L[2] + L[2].z * L[3];
	}
	else if (config == 7) // V1 V2 V3 clip V4
	{
		n = 5;
		L[4] = -L[3].z * L[0] + L[0].z * L[3];
		L[3] = -L[3].z * L[2] + L[2].z * L[3];
	}
	else if (config == 8) // V4 clip V1 V2 V3
	{
		n = 3;
		L[0] = -L[0].z * L[3] + L[3].z * L[0];
		L[1] = -L[2].z * L[3] + L[3].z * L[2];
		L[2] =  L[3];
	}
	else if (config == 9) // V1 V4 clip V2 V3
	{
		n = 4;
		L[1] = -L[1].z * L[0] + L[0].z * L[1];
		L[2] = -L[2].z * L[3] + L[3].z * L[2];
	}
	else if (config == 10) // V2 V4 clip V1 V3) impossible
	{
		n = 0;
	}
	else if (config == 11) // V1 V2 V4 clip V3
	{
		n = 5;
		L[4] = L[3];
		L[3] = -L[2].z * L[3] + L[3].z * L[2];
		L[2] = -L[2].z * L[1] + L[1].z * L[2];
	}
	else if (config == 12) // V3 V4 clip V1 V2
	{
		n = 4;
		L[1] = -L[1].z * L[2] + L[2].z * L[1];
		L[0] = -L[0].z * L[3] + L[3].z * L[0];
	}
	else if (config == 13) // V1 V3 V4 clip V2
	{
		n = 5;
		L[4] = L[3];
		L[3] = L[2];
		L[2] = -L[1].z * L[2] + L[2].z * L[1];
		L[1] = -L[1].z * L[0] + L[0].z * L[1];
	}
	else if (config == 14) // V2 V3 V4 clip V1
	{
		n = 5;
		L[4] = -L[0].z * L[3] + L[3].z * L[0];
		L[0] = -L[0].z * L[1] + L[1].z * L[0];
	}
	else if (config == 15) // V1 V2 V3 V4
	{
		n = 4;
	}

	if (n == 3)
		L[3] = L[0];
	if (n == 4)
		L[4] = L[0];
}

INLINE float LTC_Evaluate( float3 N, float3 V, float3 P, float3x3 Minv,
							@property( syntax == metal )constant@end  float4 points[4],
							bool twoSided )
{
	// construct orthonormal basis around N
	float3 T1, T2;
	T1 = normalize( V - N*dot(V, N) );
	T2 = cross(N, T1);

	// rotate area light in (T1, T2, N) basis
	Minv = mul( Minv, transpose( buildFloat3x3( T1, T2, N ) ) );

	// polygon (allocate 5 vertices for clipping)
	float3 L[5];
	L[0] = mul( Minv, points[0].xyz - P );
	L[1] = mul( Minv, points[1].xyz - P );
	L[2] = mul( Minv, points[2].xyz - P );
	L[3] = mul( Minv, points[3].xyz - P );
	//Initialize L[4]. Some HLSL compiler versions complains this is uninitialized even though
	//it shouldn't complain.
	//See https://forums.ogre3d.org/viewtopic.php?f=25&t=94804#p544184
	L[4] = float3( 0, 1, 0 );

	// integrate
	float sum = 0.0;

	@property( hlms_lights_ltc_clipless )
		float3 dir = points[0].xyz - P;
		float3 lightNormal = cross( points[1].xyz - points[0].xyz, points[3].xyz - points[0].xyz );
		bool behind = (dot(dir, lightNormal) < 0.0);

		L[0] = normalize(L[0]);
		L[1] = normalize(L[1]);
		L[2] = normalize(L[2]);
		L[3] = normalize(L[3]);

		float3 vsum = float3(0.0);

		vsum += IntegrateEdgeVec(L[0], L[1]);
		vsum += IntegrateEdgeVec(L[1], L[2]);
		vsum += IntegrateEdgeVec(L[2], L[3]);
		vsum += IntegrateEdgeVec(L[3], L[0]);

		float len = length(vsum);
		float z = vsum.z/len;

		if (behind)
			z = -z;

		float2 uv = float2(z*0.5 + 0.5, len);
		uv = uv * LUT_SCALE + LUT_BIAS;

		float scale = OGRE_SampleArray2DLevel( ltcMatrix, ltcSampler, uv, 1, 0 ).w;

		sum = len*scale;

		if( behind && !twoSided )
			sum = 0.0;
	@end
	@property( !hlms_lights_ltc_clipless )
		int n;
		ClipQuadToHorizon( L, n );

		if( n == 0 )
			return 0;
		// project onto sphere
		L[0] = normalize( L[0] );
		L[1] = normalize( L[1] );
		L[2] = normalize( L[2] );
		L[3] = normalize( L[3] );
		L[4] = normalize( L[4] );

		// integrate
		sum += IntegrateEdge( L[0], L[1] );
		sum += IntegrateEdge( L[1], L[2] );
		sum += IntegrateEdge( L[2], L[3] );
		if( n >= 4 )
			sum += IntegrateEdge( L[3], L[4] );
		if( n == 5 )
			sum += IntegrateEdge( L[4], L[0] );

		sum = twoSided ? abs(sum) : max(0.0, sum);
	@end

	return sum;
}
@end
@end


@property( hlms_lights_area_ltc )
@piece( DoAreaLtcLights )
for( int i=0; i<floatBitsToInt( light2Buf.numAreaLtcLights ); ++i )
{
	lightDir = light2Buf.areaLtcLights[i].position.xyz - inPs.pos;
	fDistance = length( lightDir );

	@property( obb_restraint_ltc )
		float3 obbFadeFactorLtc = float3( light2Buf.areaLtcLights[i].points[1].w,
										  light2Buf.areaLtcLights[i].points[2].w,
										  light2Buf.areaLtcLights[i].points[3].w );
		float obbRestraintFade = getObbRestraintFade( light2Buf.areaLtcLights[i].obbRestraint, inPs.pos,
													  obbFadeFactorLtc );
		@piece( obbRestraintTestLtc )&& obbRestraintFade > 0.0@end
	@end

	if( fDistance <= light2Buf.areaLtcLights[i].diffuse.w
		@insertpiece( obbRestraintTestLtc )
		@insertpiece( andObjAreaLtcLightMaskCmp ) )
	{
		float2 ltcUV = float2( pixelData.roughness, sqrt(1.0 - pixelData.NdotV) );
		ltcUV = ltcUV * LUT_SCALE + LUT_BIAS;

		float4 ltc0 = OGRE_SampleArray2DLevel( ltcMatrix, ltcSampler, ltcUV, 0, 0 );
		float4 ltc1 = OGRE_SampleArray2DLevel( ltcMatrix, ltcSampler, ltcUV, 1, 0 );

		float3x3 Minv = buildFloat3x3(
			float3(ltc0.x, 0, ltc0.y),
			float3(  0,  1,    0),
			float3(ltc0.z, 0, ltc0.w)
		);

		bool doubleSidedLtc = light2Buf.areaLtcLights[i].specular.w != 0.0f;

		@property( !fresnel_scalar )
			float ltcSpecular = LTC_Evaluate( pixelData.normal.xyz, pixelData.viewDir.xyz, inPs.pos.xyz, Minv,
											  light2Buf.areaLtcLights[i].points, doubleSidedLtc );
			// BRDF shadowing and Fresnel
			ltcSpecular *= pixelData.F0 * ltc1.x + (1.0 - pixelData.F0) * ltc1.y;
		@else
			float3 ltcSpecular;
			ltcSpecular.x = LTC_Evaluate( pixelData.normal.xyz, pixelData.viewDir.xyz, inPs.pos.xyz, Minv,
										  light2Buf.areaLtcLights[i].points, doubleSidedLtc );
			ltcSpecular.yz = ltcSpecular.xx;
			// BRDF shadowing and Fresnel
			ltcSpecular.xyz *= pixelData.F0.xyz * ltc1.x + (1.0 - pixelData.F0.xyz) * ltc1.y;
		@end

		float ltcDiffuse = LTC_Evaluate( pixelData.normal.xyz, pixelData.viewDir.xyz, inPs.pos.xyz,
										 buildFloat3x3( float3( 1, 0, 0 ), float3( 0, 1, 0 ), float3( 0, 0, 1 ) ),
										 light2Buf.areaLtcLights[i].points, doubleSidedLtc );

		@property( obb_restraint_ltc )
			ltcDiffuse	*= obbRestraintFade;
			ltcSpecular	*= obbRestraintFade;
		@end

		finalColour += light2Buf.areaLtcLights[i].diffuse.xyz * ltcDiffuse * pixelData.diffuse.xyz;
		finalColour += light2Buf.areaLtcLights[i].specular.xyz * ltcSpecular * pixelData.specular.xyz;
	}
}
@end
@end
