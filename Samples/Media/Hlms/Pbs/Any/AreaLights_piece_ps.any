//#include "SyntaxHighlightingMisc.h"

@property( hlms_lights_area_approx )

@property( hlms_lights_area_tex_mask )
	@piece( DeclAreaApproxTextures )
		@property( syntax == glsl || syntax == glsles )
			uniform sampler2DArray areaLightMasks;
		@end
		@property( syntax == hlsl )
			@property( !hlms_lights_area_tex_colour )
				Texture2DArray<float> areaLightMasks	: register(t@value(areaLightMasks));
			@else
				Texture2DArray<float3> areaLightMasks	: register(t@value(areaLightMasks));
			@end
			SamplerState areaLightMasksSampler		: register(s@value(areaLightMasks));
		@end
		@property( syntax == metal )
			, texture2d_array<float> areaLightMasks	[[texture(@value(areaLightMasks))]]
			, sampler areaLightMasksSampler			[[sampler(@value(areaLightMasks))]]
		@end
	@end
@end

@piece( DoAreaApproxLights )
	@property( !hlms_lights_area_tex_colour )
		#define AREA_LIGHTS_TEX_SWIZZLE x
	@else
		#define AREA_LIGHTS_TEX_SWIZZLE xyz
	@end

	float3 projectedPosInPlane;

	for( int i=0; i<floatBitsToInt( light1Buf.numAreaApproxLights ); ++i )
	{
		lightDir = light1Buf.areaApproxLights[i].position.xyz - inPs.pos;
		projectedPosInPlane.xyz = inPs.pos - dot( -lightDir.xyz, light1Buf.areaApproxLights[i].direction.xyz ) *
											 light1Buf.areaApproxLights[i].direction.xyz;
		fDistance = length( lightDir );

		@property( obb_restraint_approx )
			float obbRestraintFade = getObbRestraintFade( light1Buf.areaApproxLights[i].obbRestraint, inPs.pos,
														  light1Buf.areaApproxLights[i].obbFadeFactorApprox.xyz );
			@piece( obbRestraintTestApprox )&& obbRestraintFade > 0.0@end
		@end

		if( fDistance <= light1Buf.areaApproxLights[i].attenuation.x
			@insertpiece( obbRestraintTestApprox )
		/*&& dot( -lightDir, light1Buf.areaApproxLights[i].direction.xyz ) > 0*/ @insertpiece( andObjAreaApproxLightMaskCmp ) )
		{
			projectedPosInPlane.xyz -= light1Buf.areaApproxLights[i].position.xyz;
			float3 areaLightBitangent = cross( light1Buf.areaApproxLights[i].direction.xyz,
											   light1Buf.areaApproxLights[i].tangent.xyz );
			float2 invHalfRectSize = float2( light1Buf.areaApproxLights[i].direction.w,
											 light1Buf.areaApproxLights[i].tangent.w );
			//lightUV is in light space, in range [-0.5; 0.5]
			float2 lightUVForTex;
			float2 lightUV;
			lightUV.x = dot( projectedPosInPlane.xyz, light1Buf.areaApproxLights[i].tangent.xyz );
			lightUV.y = dot( projectedPosInPlane.xyz, areaLightBitangent );
			lightUV.xy *= invHalfRectSize.xy /*/ sqrt( fDistance )*/;
			//Displace the UV by the normal to account for edge cases when
			//a surface is close and perpendicular to the light. This is fully a hack and
			//the values (e.g. 0.25) is completely eye balled.
			lightUVForTex.xy = lightUV.xy;
			lightUV.xy += float2( dot( light1Buf.areaApproxLights[i].tangent.xyz, pixelData.normal ),
								  dot( areaLightBitangent, pixelData.normal ) ) * 3.75 * invHalfRectSize.xy;
			lightUV.xy = clamp( lightUV.xy, -0.5f, 0.5f );
			lightUVForTex = clamp( lightUVForTex.xy, -0.5f, 0.5f );
	//		float booster = 1.0f - smoothstep( 0.2f, 1.9f, max( abs( lightUV.x ), abs( lightUV.y ) ) );
	//		booster = 1.0f + booster * 2.25f;
			float booster = lerp( 1.0f, 4.0f, pixelData.roughness );

		@property( !hlms_lights_area_tex_colour || !hlms_lights_area_tex_mask )
			float diffuseMask = 1.0f;
		@else
			float3 diffuseMask = float3( 1.0f, 1.0f, 1.0f );
		@end
		@property( hlms_lights_area_tex_mask )
			if( i < floatBitsToInt( light1Buf.numAreaApproxLightsWithMask ) )
			{
				// 1 / (1 - 0.02) = 1.020408163
				float diffuseMipsLeft = light1Buf.areaLightNumMipmapsSpecFactor * 0.5 -
										light1Buf.areaLightDiffuseMipmapStart * 1.020408163f;
				diffuseMask = OGRE_SampleArray2DLevel( areaLightMasks, areaLightMasksSampler,
													   lightUVForTex + 0.5f,
													   light1Buf.areaApproxLights[i].attenuation.w,
													   light1Buf.areaLightDiffuseMipmapStart +
													   (pixelData.roughness - 0.02f) * diffuseMipsLeft ).AREA_LIGHTS_TEX_SWIZZLE;
			}
		@end

			float3 closestPoint = light1Buf.areaApproxLights[i].position.xyz +
					light1Buf.areaApproxLights[i].tangent.xyz * lightUV.x / invHalfRectSize.x +
					areaLightBitangent.xyz * lightUV.y / invHalfRectSize.y;

			float3 lightDir2 = lightDir / fDistance;
			lightDir = closestPoint.xyz - inPs.pos;
			fDistance= length( lightDir );

			float3 toShapeLight = reflect( -pixelData.viewDir, pixelData.normal );
			float denom = dot( toShapeLight, -light1Buf.areaApproxLights[i].direction.xyz );
			@property( !hlms_lights_area_tex_mask || !hlms_lights_area_tex_colour )
				float specCol = 0;
			@else
				float3 specCol = float3( 0, 0, 0 );
			@end
			if( denom > 1e-6f || light1Buf.areaApproxLights[i].doubleSided.x != 0.0f )
			{
				float3 p0l0 = light1Buf.areaApproxLights[i].position.xyz - inPs.pos;
				float t = dot( p0l0, -light1Buf.areaApproxLights[i].direction.xyz ) / denom;
				if( t >= 0 )
				{
					float3 posInShape = inPs.pos.xyz + toShapeLight.xyz * t - light1Buf.areaApproxLights[i].position.xyz;
					float2 reflClipSpace;
					reflClipSpace.x = dot( light1Buf.areaApproxLights[i].tangent.xyz, posInShape );
					reflClipSpace.y = dot( areaLightBitangent, posInShape );

					float specVal;
					specVal = 0.5f / (length( max( abs( reflClipSpace * invHalfRectSize ) - 0.5f, 0.0f ) ) + 0.5f);
					specVal = min( specVal, 1.0f );
					float areaPower = ((pixelData.roughness * 10.0f + 1.0f) * 0.005f) /
									  (pixelData.roughness * pixelData.roughness * pixelData.roughness);
					areaPower = min( areaPower, 512.0f ); //Prevent INFs.
					specVal = pow( specVal, areaPower ) * min( areaPower * areaPower, 1.0f );

					@property( !hlms_lights_area_tex_mask || !hlms_lights_area_tex_colour )
						specCol = specVal;
					@else
						specCol = float3( specVal, specVal, specVal );
					@end

					@property( hlms_lights_area_tex_mask )
						if( i < floatBitsToInt( light1Buf.numAreaApproxLightsWithMask ) )
						{
							specCol *= OGRE_SampleArray2DLevel( areaLightMasks, areaLightMasksSampler,
																reflClipSpace * invHalfRectSize + 0.5f,
																light1Buf.areaApproxLights[i].attenuation.w,
																(pixelData.roughness - 0.02f) *
																light1Buf.areaLightNumMipmapsSpecFactor ).AREA_LIGHTS_TEX_SWIZZLE;
						}
					@end
				}
			}

			lightDir *= 1.0 / fDistance;
			//float fAreaW = dot( lightDir, -light1Buf.areaApproxLights[i].direction.xyz ) * 0.5f + 0.5f;
			//lightDir = (-light1Buf.areaApproxLights[i].direction.xyz + lightDir) * 0.50f;
			//lightDir = lerp( lightDir2, lightDir, fAreaW );
			float globalDot = saturate( dot( -lightDir, light1Buf.areaApproxLights[i].direction.xyz ) );
			globalDot = light1Buf.areaApproxLights[i].doubleSided.x != 0.0f ? 1.0f : globalDot;
			tmpColour = BRDF_AreaLightApprox( lightDir,
											  light1Buf.areaApproxLights[i].diffuse.xyz * diffuseMask,
											  light1Buf.areaApproxLights[i].specular.xyz * specCol,
											  pixelData ) * ( globalDot * globalDot ) * booster;
			float atten = 1.0 / (0.5 + (light1Buf.areaApproxLights[i].attenuation.y + light1Buf.areaApproxLights[i].attenuation.z * fDistance) * fDistance );

			@property( obb_restraint_approx )
				atten *= obbRestraintFade;
			@end

			finalColour += tmpColour * atten;
			//finalColour.xyz = float3( dot( lightDir, pixelData.normal ) );
			//finalColour.xyz = float3( lightUV.xy + 0.5f, 0.0f );
			//finalColour.xyz = float3( closestPoint.xy + 0.5f, 0.0f );
		}
	}

@end

@piece( DeclareBRDF_AreaLightApprox )
INLINE float3 BRDF_AreaLightApprox
(
	float3 lightDir, float3 lightDiffuse, float3 lightSpecular, PixelData pixelData
)
{
	float3 halfWay= normalize( lightDir + pixelData.viewDir );
	float NdotL = saturate( dot( pixelData.normal, lightDir ) );
	float VdotH = saturate( dot( pixelData.viewDir, halfWay ) );

	//Formula:
	//	fresnelS = lerp( (1 - V*H)^5, 1, F0 )
	float_fresnel fresnelS = @insertpiece( getSpecularFresnel );

	//We should divide Rs by PI, but it was done inside G for performance
	float3 Rs = fresnelS * pixelData.specular.xyz * lightSpecular;

	//Diffuse BRDF (*Normalized* Disney, see course_notes_moving_frostbite_to_pbr.pdf
	//"Moving Frostbite to Physically Based Rendering" Sebastien Lagarde & Charles de Rousiers)
	float energyBias	= pixelData.roughness * 0.5;
	float energyFactor	= lerp( 1.0, 1.0 / 1.51, pixelData.roughness );
	float fd90			= energyBias + 2.0 * VdotH * VdotH * pixelData.roughness;
	float lightScatter	= 1.0 + (fd90 - 1.0) * pow( 1.0 - NdotL, 5.0 );
	float viewScatter	= 1.0 + (fd90 - 1.0) * pow( 1.0 - pixelData.NdotV, 5.0 );

@property( fresnel_separate_diffuse )
	float_fresnel fresnelD = @insertpiece( getDiffuseFresnel );
@else
	float fresnelD = 1.0f - @insertpiece( getMaxFresnelS );
@end

	//We should divide Rd by PI, but it is already included in kD
	float3 Rd = (lightScatter * viewScatter * energyFactor * fresnelD) * pixelData.diffuse.xyz * lightDiffuse;

	return NdotL * (Rs + Rd);
}
@end

@end
