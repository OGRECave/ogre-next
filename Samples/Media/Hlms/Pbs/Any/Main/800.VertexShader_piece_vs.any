
#include "/media/matias/Datos/SyntaxHighlightingMisc.h"

@piece( DefaultHeaderVS )
	@property( hlms_skeleton )
		#define worldViewMat passBuf.view
	@else
		#define worldViewMat worldView
	@end

	@insertpiece( Common_Matrix_DeclUnpackMatrix4x4 )
	@insertpiece( Common_Matrix_DeclUnpackMatrix4x3 )

	// START UNIFORM DECLARATION
	@insertpiece( PassStructDecl )
	@property( hlms_skeleton || hlms_shadowcaster || hlms_pose || syntax == metal || lower_gpu_overhead )@insertpiece( InstanceStructDecl )@end
	@insertpiece( AtmosphereNprSkyStructDecl )
	@insertpiece( custom_vs_uniformStructDeclaration )
	// END UNIFORM DECLARATION

	@property( hlms_qtangent )
		@insertpiece( DeclQuat_xAxis )
		@property( normal_map )
			@insertpiece( DeclQuat_yAxis )
		@end
	@end

    @insertpiece( DeclShadowMapMacros )
	@insertpiece( DeclAtmosphereNprSkyFuncs )
	
	@property( accurate_non_uniform_scaled_normals )
		midf3x3 adjugate( midf3x3 m )
		{
			midf3x3 n;
			n[0][0] = m[1][1] * m[2][2] - m[1][2] * m[2][1];
			n[0][1] = m[0][2] * m[2][1] - m[0][1] * m[2][2];
			n[0][2] = m[0][1] * m[1][2] - m[0][2] * m[1][1];
			n[1][0] = m[1][2] * m[2][0] - m[1][0] * m[2][2];
			n[1][1] = m[0][0] * m[2][2] - m[0][2] * m[2][0];
			n[1][2] = m[0][2] * m[1][0] - m[0][0] * m[1][2];
			n[2][0] = m[1][0] * m[2][1] - m[2][0] * m[1][1];
			n[2][1] = m[0][1] * m[2][0] - m[0][0] * m[2][1];
			n[2][2] = m[0][0] * m[1][1] - m[0][1] * m[1][0];
			return n;
		}
	@end
@end

@property( !hlms_skeleton )
	@piece( local_vertex )inputPos@end
	@piece( local_normal )inputNormal@end
	@piece( local_tangent )inputTangent@end
@else
	@piece( local_vertex )worldPos@end
	@piece( local_normal )worldNorm@end
	@piece( local_tangent )worldTang@end
@end

@property( hlms_skeleton )
@piece( SkeletonTransform )
	uint _idx = (inVs_blendIndices[0] << 1u) + inVs_blendIndices[0]; //inVs_blendIndices[0] * 3u; a 32-bit int multiply is 4 cycles on GCN! (and mul24 is not exposed to GLSL...)
	uint matStart = worldMaterialIdx[inVs_drawId].x >> 9u;
	float4 worldMat[3];
	worldMat[0] = readOnlyFetch( worldMatBuf, int(matStart + _idx + 0u) );
	worldMat[1] = readOnlyFetch( worldMatBuf, int(matStart + _idx + 1u) );
	worldMat[2] = readOnlyFetch( worldMatBuf, int(matStart + _idx + 2u) );
	float4 worldPos;
	worldPos.x = dot( worldMat[0], inputPos );
	worldPos.y = dot( worldMat[1], inputPos );
	worldPos.z = dot( worldMat[2], inputPos );
	worldPos.xyz *= inVs_blendWeights[0];
    @property( hlms_normal || hlms_qtangent )
		midf3 worldNorm;
		worldNorm.x = dot( midf3_c( worldMat[0].xyz ), inputNormal );
		worldNorm.y = dot( midf3_c( worldMat[1].xyz ), inputNormal );
		worldNorm.z = dot( midf3_c( worldMat[2].xyz ), inputNormal );
		worldNorm *= midf_c( inVs_blendWeights[0] );
	@end
	@property( normal_map )
		midf3 worldTang;
		worldTang.x = dot( midf3_c( worldMat[0].xyz ), inputTangent );
		worldTang.y = dot( midf3_c( worldMat[1].xyz ), inputTangent );
		worldTang.z = dot( midf3_c( worldMat[2].xyz ), inputTangent );
		worldTang *= midf_c( inVs_blendWeights[0] );
	@end

	@psub( NeedsMoreThan1BonePerVertex, hlms_bones_per_vertex, 1 )
	@property( NeedsMoreThan1BonePerVertex )
		float4 tmp4;
		tmp4.w = 1.0;
		midf3 tmp3;
	@end //!NeedsMoreThan1BonePerVertex
	@foreach( hlms_bones_per_vertex, n, 1 )
		_idx = (inVs_blendIndices[@n] << 1u) + inVs_blendIndices[@n]; //inVs_blendIndices[@n] * 3; a 32-bit int multiply is 4 cycles on GCN! (and mul24 is not exposed to GLSL...)
		worldMat[0] = readOnlyFetch( worldMatBuf, int(matStart + _idx + 0u) );
		worldMat[1] = readOnlyFetch( worldMatBuf, int(matStart + _idx + 1u) );
		worldMat[2] = readOnlyFetch( worldMatBuf, int(matStart + _idx + 2u) );
		tmp4.x = dot( worldMat[0], inputPos );
		tmp4.y = dot( worldMat[1], inputPos );
		tmp4.z = dot( worldMat[2], inputPos );
		worldPos.xyz += (tmp4 * inVs_blendWeights[@n]).xyz;
		@property( hlms_normal || hlms_qtangent )
			tmp3.x = dot( midf3_c( worldMat[0].xyz ), inputNormal );
			tmp3.y = dot( midf3_c( worldMat[1].xyz ), inputNormal );
			tmp3.z = dot( midf3_c( worldMat[2].xyz ), inputNormal );
			worldNorm += tmp3.xyz * midf_c( inVs_blendWeights[@n] );
		@end
		@property( normal_map )
			tmp3.x = dot( midf3_c( worldMat[0].xyz ), inputTangent );
			tmp3.y = dot( midf3_c( worldMat[1].xyz ), inputTangent );
			tmp3.z = dot( midf3_c( worldMat[2].xyz ), inputTangent );
			worldTang += tmp3.xyz * midf_c( inVs_blendWeights[@n] );
		@end
	@end

	worldPos.w = 1.0;
@end // SkeletonTransform
@end // !hlms_skeleton

@property( hlms_pose )
@piece( PoseTransform )
	// Pose data starts after all 3x4 bone matrices
	uint poseDataStart = (worldMaterialIdx[inVs_drawId].x >> 9u) @property( hlms_skeleton ) + @value(hlms_bones_per_vertex)u * 3u@end ;

	float4 poseData = readOnlyFetch( worldMatBuf, int( poseDataStart ) );

	@property( syntax != hlsl )
		@property( syntax != metal )
			uint baseVertexID = floatBitsToUint( poseData.x );
		@end
		uint vertexID = uint( inVs_vertexId )- baseVertexID;
	@else
		uint vertexID = inVs_vertexId;
	@end

	@psub( MoreThanOnePose, hlms_pose, 1 )
	@property( !MoreThanOnePose )
		float4 poseWeights = readOnlyFetch( worldMatBuf, int(poseDataStart + 1u) );
		float4 posePos = float4( bufferFetch( poseBuf, int( vertexID @property( hlms_pose_normals )<< 1u@end ) ) );
		inputPos += posePos * poseWeights.x;
		@property( hlms_pose_normals && (hlms_normal || hlms_qtangent) )
			float4 poseNormal = float4( bufferFetch( poseBuf, int( (vertexID << 1u) + 1u ) ) );
			inputNormal += poseNormal.xyz * poseWeights.x;
		@end
		@pset( NumPoseWeightVectors, 1 )
	@else
		// NumPoseWeightVectors = (hlms_pose / 4) + min(hlms_pose % 4, 1)
		@pdiv( NumPoseWeightVectorsA, hlms_pose, 4 )
		@pmod( NumPoseWeightVectorsB, hlms_pose, 4 )
		@pmin( NumPoseWeightVectorsC, NumPoseWeightVectorsB, 1 )
		@padd( NumPoseWeightVectors, NumPoseWeightVectorsA, NumPoseWeightVectorsC )
		uint numVertices = floatBitsToUint( poseData.y );

		@psub( MoreThanOnePoseWeightVector, NumPoseWeightVectors, 1 )
		@property( !MoreThanOnePoseWeightVector )
			float4 poseWeights = readOnlyFetch( worldMatBuf, int( poseDataStart + 1u ) );
			@foreach( hlms_pose, n )
				inputPos += float4( bufferFetch( poseBuf, int( (vertexID + numVertices * @nu) @property( hlms_pose_normals )<< 1u@end ) ) ) * poseWeights[@n];
				@property( hlms_pose_normals && (hlms_normal || hlms_qtangent) )
				inputNormal += midf3_c( bufferFetch( poseBuf, int( ((vertexID + numVertices * @nu) << 1u) + 1u ) ).xyz * poseWeights[@n] );
				@end
			@end
		@else
			float poseWeights[@value(NumPoseWeightVectors) * 4];
			@foreach( NumPoseWeightVectors, n)
				float4 weights@n = readOnlyFetch( worldMatBuf, int( poseDataStart + 1u + @nu ) );
				poseWeights[@n * 4 + 0] = weights@n[0];
				poseWeights[@n * 4 + 1] = weights@n[1];
				poseWeights[@n * 4 + 2] = weights@n[2];
				poseWeights[@n * 4 + 3] = weights@n[3];
			@end
			@foreach( hlms_pose, n )
				inputPos += float4( bufferFetch( poseBuf, int( (vertexID + numVertices * @nu) @property( hlms_pose_normals )<< 1u@end ) ) ) * poseWeights[@n];
				@property( hlms_pose_normals && (hlms_normal || hlms_qtangent) )
					inputNormal += midf3_c( bufferFetch( poseBuf, int( ((vertexID + numVertices * @nu) << 1u) + 1u ) ).xyz * poseWeights[@nu] );
				@end
			@end
		@end
	@end

	// If hlms_skeleton is defined the transforms will be provided by bones.
	// If hlms_pose is not combined with hlms_skeleton the object's worldMat and worldView have to be set.
	@property( !hlms_skeleton )
		float4 worldMat[3];
		worldMat[0] = readOnlyFetch( worldMatBuf, int( poseDataStart + @value(NumPoseWeightVectors)u + 1u ) );
		worldMat[1] = readOnlyFetch( worldMatBuf, int( poseDataStart + @value(NumPoseWeightVectors)u + 2u ) );
		worldMat[2] = readOnlyFetch( worldMatBuf, int( poseDataStart + @value(NumPoseWeightVectors)u + 3u ) );
		float4 worldPos;
		worldPos.x = dot( worldMat[0], inputPos );
		worldPos.y = dot( worldMat[1], inputPos );
		worldPos.z = dot( worldMat[2], inputPos );
		worldPos.w = 1.0;

		@property( hlms_normal || hlms_qtangent )
			@foreach( 4, n )
				float4 row@n = readOnlyFetch( worldMatBuf, int( poseDataStart + @value(NumPoseWeightVectors)u + 4u + @nu ) );
			@end
			float4x4 worldView = float4x4( row0, row1, row2, row3 );
			@property( syntax == hlsl )
				worldView = transpose( worldView );
			@end
		@end
	@end
@end // PoseTransform
@end // hlms_pose

@piece( CalculatePsPos )mul( @insertpiece(local_vertex), worldViewMat ).xyz@end

@piece( VertexTransform )
	@insertpiece( custom_vs_preTransform )
	//Lighting is in view space
	@property( hlms_normal || hlms_qtangent )	outVs.pos		= @insertpiece( CalculatePsPos );@end
	@property( hlms_normal || hlms_qtangent )
		midf3x3 worldMat3x3 = toMidf3x3( worldViewMat );
		@property( accurate_non_uniform_scaled_normals )
			midf3x3 normalMat = transpose( adjugate( worldMat3x3 ) );
			outVs.normal = normalize( mul( @insertpiece(local_normal), normalMat ) );
		@else
			outVs.normal = mul( @insertpiece(local_normal), worldMat3x3 );
		@end
	@end
	@property( normal_map )						outVs.tangent	= mul( @insertpiece(local_tangent), toMidf3x3( worldViewMat ) );@end
	@property( !hlms_dual_paraboloid_mapping )
        @property( !hlms_use_uv_baking )
			@property( !hlms_instanced_stereo )
				outVs_Position = mul( worldPos, passBuf.viewProj );
			@else
				outVs_Position = mul( worldPos, passBuf.viewProj[(inVs_stereoDrawId & 0x01u)] );
				@property( hlms_forwardplus )
					outVs.cullCamPosXY.xyz = mul( float4( outVs.pos.xyz, 1.0f ),
												  passBuf.leftEyeViewSpaceToCullCamClipSpace ).xyw;
				@end
			@end
		@else
			outVs_Position.xy = inVs_uv@value( hlms_uv_baking ).xy * 2.0f - 1.0f + passBuf.pixelOffset2x.xy;
			@property( !hlms_forwardplus_flipY || syntax != glsl )
				outVs_Position.y = -outVs_Position.y;
			@end
			outVs_Position.zw = float2( 0.0f, 1.0f );
		@end
	@else
		//Dual Paraboloid Mapping
		outVs_Position.w	= 1.0f;
		@property( hlms_normal || hlms_qtangent )outVs_Position.xyz	= outVs.pos;@end
		@property( !hlms_normal && !hlms_qtangent )outVs_Position.xyz	= @insertpiece( CalculatePsPos );@end
		float L = length( outVs_Position.xyz );
		outVs_Position.z	+= 1.0f;
		outVs_Position.xy	/= outVs_Position.z;
		outVs_Position.z	= (L - NearPlane) / (FarPlane - NearPlane);
	@end
@end

@piece( DefaultBodyVS )
	// Define inputPos using inVs_vertex.
	@property( hlms_pose )
		float4 inputPos = inVs_vertex; // We need inputPos as lvalue for PoseTransform
	@else
		#define inputPos inVs_vertex
	@end

	// Define inputNormal and inputTangent using inVs_normal, inVs_tangent, inVs_qtangent
	@property( hlms_qtangent )
		//Decode qTangent to TBN with reflection
		const midf4 qTangent = normalize( inVs_qtangent );
		midf3 inputNormal = xAxis( qTangent );
		@property( normal_map )
			midf3 inputTangent = yAxis( qTangent );
			outVs.biNormalReflection = sign( inVs_qtangent.w ); //We ensure in C++ qtangent.w is never 0
		@end
	@else
		@property( hlms_normal )
			midf3 inputNormal = midf3_c( inVs_normal ); // We need inputNormal as lvalue for PoseTransform
		@end
		@property( normal_map )
			midf3 inputTangent = midf3_c( inVs_tangent.xyz );
			@property( hlms_tangent4 )
				outVs.biNormalReflection = sign( midf( inVs_tangent.w ) );
			@end
		@end
	@end

	@property( !hlms_skeleton && !hlms_pose )
		ogre_float4x3 worldMat = UNPACK_MAT4x3( worldMatBuf, inVs_drawId @property( !hlms_shadowcaster )<< 1u@end );
		@property( hlms_normal || hlms_qtangent )
			float4x4 worldView = UNPACK_MAT4( worldMatBuf, (inVs_drawId << 1u) + 1u );
		@end

		float4 worldPos = float4( mul(inVs_vertex, worldMat).xyz, 1.0f );
		@property( ( hlms_normal || hlms_qtangent) && hlms_num_shadow_map_lights )
			// We need worldNorm for normal offset bias
			midf3 worldNorm = mul( inputNormal, toMidf3x3( worldMat ) ).xyz;
		@end
	@end

	@insertpiece( PoseTransform )

	@property( !hlms_skeleton && hlms_pose && ( hlms_normal || hlms_qtangent) && hlms_num_shadow_map_lights )
		// We need worldNorm for normal offset bias, special path when using poses
		midf3 worldNorm;
		worldNorm.x = dot( midf3_c( worldMat[0].xyz ), inputNormal );
		worldNorm.y = dot( midf3_c( worldMat[1].xyz ), inputNormal );
		worldNorm.z = dot( midf3_c( worldMat[2].xyz ), inputNormal );
	@end

	@insertpiece( SkeletonTransform )
	@insertpiece( VertexTransform )

	@insertpiece( DoShadowReceiveVS )
	@insertpiece( DoShadowCasterVS )

	@insertpiece( DoAtmosphereNprSky )

	/// hlms_uv_count will be 0 on shadow caster passes w/out alpha test
	@foreach( hlms_uv_count, n )
		outVs.uv@n = inVs_uv@n;@end

@property( syntax == metal || lower_gpu_overhead )
	@property( (!hlms_shadowcaster || alpha_test) && !lower_gpu_overhead )
		outVs.materialId = worldMaterialIdx[inVs_drawId].x & 0x1FFu;
	@end

	@property( hlms_fine_light_mask || hlms_forwardplus_fine_light_mask )
		outVs.objLightMask = worldMaterialIdx[inVs_drawId].z;
	@end

	@property( use_planar_reflections )
		outVs.planarReflectionIdx = ushort( worldMaterialIdx[inVs_drawId].w );
	@end
@else
	@property( (!hlms_shadowcaster || alpha_test) && !lower_gpu_overhead )
		outVs.drawId = inVs_drawId;
	@end
@end

	@property( hlms_use_prepass_msaa > 1 )
		outVs.zwDepth.xy = outVs_Position.zw;
	@end

	@property( hlms_global_clip_planes )
		outVs_clipDistance0 = dot( float4( worldPos.xyz, 1.0 ), passBuf.clipPlane0.xyzw );
	@end

	@property( hlms_instanced_stereo )
		outVs_viewportIndex	= int( inVs_stereoDrawId & 0x01u );
	@end
@end
