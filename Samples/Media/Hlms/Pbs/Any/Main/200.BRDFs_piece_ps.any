
//#include "SyntaxHighlightingMisc.h"

//For mortals:
//	getSpecularFresnel	= F0 + pow( 1.0 - VdotH, 5.0 ) * (1.0 - F0)
//	getDiffuseFresnel	= 1.0 - F0 + pow( 1.0 - NdotL, 5.0 ) * F0
//	getSpecularFresnelWithRoughness = F0 + pow( 1.0 - VdotH, 5.0 ) * (max(roughness, (1.0 - F0)) - F0)
//	getDiffuseFresnelWithRoughness = max(roughness, (1.0 - F0) - F0 + pow( 1.0 - NdotL, 5.0 ) * F0
@piece( getSpecularFresnel )pixelData.F0 + pow( _h( 1.0 ) - VdotH, _h( 5.0 ) ) * (_h( 1.0 ) - pixelData.F0)@end
@piece( getDiffuseFresnel )_h( 1.0 ) - pixelData.F0 + pow( _h( 1.0 ) - NdotL, _h( 5.0 ) ) * pixelData.F0@end
@piece( getSpecularFresnelWithRoughness )pixelData.F0 + pow( _h( 1.0 ) - pixelData.NdotV, _h( 5.0 ) ) * (max( make_float_fresnel( _h( 1.0 ) - pixelData.perceptualRoughness ), pixelData.F0 ) - pixelData.F0)@end
@piece( getDiffuseFresnelWithRoughness )max( make_float_fresnel( _h( 1.0 ) - pixelData.perceptualRoughness ), pixelData.F0 ) - pixelData.F0 + pow( _h( 1.0 ) - NdotL, _h( 5.0 ) ) * pixelData.F0@end

@property( !fresnel_scalar )
	@piece( getMaxFresnelS )fresnelS@end
@else
    @piece( getMaxFresnelS )max3( fresnelS.x, fresnelS.y, fresnelS.z )@end
@end

@property( BRDF_BlinnPhong )
@piece( DeclareBRDF )
//Blinn-Phong
INLINE midf3 BRDF( midf3 lightDir, midf3 lightDiffuse, midf3 lightSpecular, PixelData pixelData PASSBUF_ARG_DECL )
{
	midf3 halfWay = normalize( lightDir + pixelData.viewDir );
	midf NdotL = saturate( dot( pixelData.normal, lightDir ) );						//Diffuse (Lambert)
	midf NdotH = clamp( dot( pixelData.normal, halfWay ), _h( 0.001 ), _h( 1.0 ) );	//Specular
	@property( !legacy_math_brdf )
		midf VdotH = clamp( dot( pixelData.viewDir, halfWay ), _h( 0.001 ), _h( 1.0 ) ); //Fresnel

		//Fresnel term (Schlick's approximation)
        float_fresnel fresnelS = @insertpiece( getSpecularFresnel );
		@property( fresnel_has_diffuse )
			@property( fresnel_separate_diffuse )
				float_fresnel fresnelD = @insertpiece( getDiffuseFresnel );
			@else
				midf fresnelD = _h( 1.0f ) - @insertpiece( getMaxFresnelS );
			@end
		@else
			midf fresnelD = _h( 1.0f );
		@end
	@end

	@property( !roughness_is_shininess )
		midf shininess = exp2( _h( 10.0 ) * (_h( 1.0 ) - pixelData.roughness) + _h( 1.0 ) ) * _h( 0.25 );
    @else
		midf shininess = pixelData.roughness;
	@end
	midf blinnPhong = pow( NdotH, shininess );

	@property( !legacy_math_brdf )
		//Normalize Blinn-Phong using (n + 8) / (8 * pi)
		//Note this factor is an approximation. The real normalization is
		//*much* more expensive. See:
		//http://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/
		blinnPhong *= ( shininess + _h( 8.0 ) ) / _h( 8.0 * 3.141592654 );

		//Avoid very small denominators, they go to NaN or cause aliasing artifacts
		//Note: For blinn-phong we use larger denominators otherwise specular blows out of proportion
		float_fresnel Rs = ( fresnelS * blinnPhong ) / max( _h( 4.0 ) * pixelData.NdotV * NdotL, _h( 0.75 ) );
		//Make diffuse look closer to Default.
		fresnelD *= lerp( _h( 1.0 ), _h( 1.0 / 1.51 ), pixelData.roughness );
    @else
		midf Rs = blinnPhong;
		midf fresnelD = _h( 1.0 );
	@end

    return NdotL * (pixelData.specular.xyz * lightSpecular * Rs +
                    pixelData.diffuse.xyz * lightDiffuse * fresnelD);
}
@end
@end

@property( BRDF_CookTorrance )
@piece( DeclareBRDF )
//Cook-Torrance
INLINE midf3 BRDF( midf3 lightDir, midf3 lightDiffuse, midf3 lightSpecular, PixelData pixelData PASSBUF_ARG_DECL )
{
	midf3 halfWay = normalize( lightDir + pixelData.viewDir );
	midf NdotL = saturate( dot( pixelData.normal, lightDir ) );
	midf NdotH = clamp( dot( pixelData.normal, halfWay ), _h( 0.001 ), _h( 1.0 ) );
	midf VdotH = clamp( dot( pixelData.viewDir, halfWay ), _h( 0.001 ), _h( 1.0 ) );

	midf sqR = pixelData.roughness * pixelData.roughness;

	//Roughness/Distribution/NDF term (Beckmann distribution)
	//Formula:
	//	Where alpha = NdotH and m = roughness
	//	R = [ 1 / (m^2 x cos(alpha)^4 ] x [ e^( -tan(alpha)^2 / m^2 ) ]
	//	R = [ 1 / (m^2 x cos(alpha)^4 ] x [ e^( ( cos(alpha)^2 - 1 )  /  (m^2 cos(alpha)^2 ) ]
@property( precision_mode == full32 )
	midf NdotH_sq = NdotH * NdotH;
	midf roughness_b = NdotH_sq - _h( 1.0 );	//( cos(alpha)^2 - 1 )
@else
	// Use Lagrange's identity to compute 1 - NdotH_sq with mediump
	//      ||a x b||^2 = ||a||^2 ||b||^2 - (a . b)^2
	// since N and H are unit vectors: ||N x H||^2 = 1.0 - NoH^2
	//
	// See https://github.com/google/filament/blob/f40b08d826c69df9fca2711841f1a9ecb77386e8/shaders/src/brdf.fs#L55
	// for details
	midf3 NcrossH = cross( pixelData.normal, halfWay );
	midf roughness_b = -dot( NcrossH, NcrossH );//( cos(alpha)^2 - 1 )
	midf NdotH_sq = roughness_b + _h( 1.0 );
@end
	midf roughness_a = _h( 1.0 ) / ( _h( 3.141592654 ) * sqR * NdotH_sq * NdotH_sq );//( 1 / (m^2 x cos(alpha)^4 )
	midf roughness_c = sqR * NdotH_sq;			//( m^2 cos(alpha)^2 )

	//Avoid Inf * 0 = NaN; we need Inf * 0 = 0
	midf R = min( roughness_a, _h( 65504.0 ) ) * exp( roughness_b / roughness_c );

	ensureValidRangeF16( R );

	//Geometric/Visibility term (Cook Torrance)
	midf shared_geo = _h( 2.0 ) * NdotH / VdotH;
	ensureValidRangeF16( shared_geo );
	midf geo_b	= shared_geo * pixelData.NdotV;
	midf geo_c	= shared_geo * NdotL;
	midf G	 	= min( _h( 1.0 ), min( geo_b, geo_c ) );

	//Fresnel term (Schlick's approximation)
	//Formula:
	//	fresnelS = lerp( (1 - V*H)^5, 1, F0 )
	//	fresnelD = lerp( (1 - N*L)^5, 1, 1 - F0 ) [See s2010_course_note_practical_implementation_at_triace.pdf]
	float_fresnel fresnelS = @insertpiece( getSpecularFresnel );
	@property( fresnel_has_diffuse )
		@property( fresnel_separate_diffuse )
			float_fresnel fresnelD = @insertpiece( getDiffuseFresnel );
		@else
			midf fresnelD = _h( 1.0f ) - @insertpiece( getMaxFresnelS );
		@end
	@else
		midf fresnelD = _h( 1.0f );
	@end

	//Avoid very small denominators, they go to NaN or cause aliasing artifacts
	float_fresnel Rs = ( fresnelS * (R * G)  ) / max( _h( 4.0 ) * pixelData.NdotV * NdotL, _h( 0.01 ) );

	return NdotL * (pixelData.specular.xyz * lightSpecular * Rs +
					pixelData.diffuse.xyz * lightDiffuse * fresnelD);
}
@end
@end

@property( BRDF_Default )
@piece( DeclareBRDF )
//Default BRDF
INLINE midf3 BRDF( midf3 lightDir, midf3 lightDiffuse, midf3 lightSpecular, PixelData pixelData PASSBUF_ARG_DECL )
{
	midf3 halfWay = normalize( lightDir + pixelData.viewDir );
	midf NdotL = saturate( dot( pixelData.normal, lightDir ) );
	midf NdotH = saturate( dot( pixelData.normal, halfWay ) );
	midf VdotH = saturate( dot( pixelData.viewDir, halfWay ) );

	midf sqR = pixelData.roughness * pixelData.roughness;

	//Geometric/Visibility term (Smith GGX Height-Correlated)
@property( GGX_height_correlated )
	midf Lambda_GGXV = NdotL * sqrt( (-pixelData.NdotV * sqR + pixelData.NdotV) * pixelData.NdotV + sqR );
	midf Lambda_GGXL = pixelData.NdotV * sqrt( (-NdotL * sqR + NdotL) * NdotL + sqR );

	midf G = _h( 0.5 ) / (( Lambda_GGXV + Lambda_GGXL + _h( 1e-6f ) ) * _h( 3.141592654 ));
@else
	midf k = ( pixelData.perceptualRoughness + _h( 1 ) ) * ( pixelData.perceptualRoughness + _h( 1 ) ) * _h( 0.125 );
	midf gL = NdotL * ( _h( 1 ) - k ) + k;
	midf gV = pixelData.NdotV * ( _h( 1 ) - k ) + k;
	midf G = _h( 1.0 ) / (( gL * gV + _h( 1e-4f ) ) * _h( 4 * 3.141592654 ) );
@end

@property( precision_mode == full32 )
	//Roughness/Distribution/NDF term (GGX)
	//Formula:
	//	Where alpha = roughness
	//	R = alpha^2 / [ PI * [ ( NdotH^2 * (alpha^2 - 1) ) + 1 ]^2 ]
	const midf f = ( NdotH * sqR - NdotH ) * NdotH + _h( 1.0 );
	midf R = sqR / (f * f); // f is guaranteed to not be 0 because we clamped pixelData.roughness

	const midf RG = R * G;
@else
	// Lagrange identity
	const midf3 NcrossH = cross( pixelData.normal, halfWay );
	const midf roughness_b = dot( NcrossH, NcrossH ); // 1.0 - NdotH * NdotH

	// We need to do 10000 / (100 * 100) because otherwise it flushes to 0, loosing a lot of info
	const midf f = (-roughness_b * sqR + sqR + roughness_b) * _h( 100.0 ) ;
	midf R = sqR * _h( 10000.0 ) / (f * f);

	// Avoid INF and NaNs
	R = min( R, _h( 128.0 ) );
	G = min( G, _h( 128.0 ) );
	const midf RG = R * G;
@end

	//Formula:
	//	fresnelS = lerp( (1 - V*H)^5, 1, F0 )
    float_fresnel fresnelS = @insertpiece( getSpecularFresnel );

	//We should divide Rs by PI, but it was done inside G for performance
	midf3 Rs = ( fresnelS * RG ) * pixelData.specular.xyz;

	//Diffuse BRDF (*Normalized* Disney, see course_notes_moving_frostbite_to_pbr.pdf
	//"Moving Frostbite to Physically Based Rendering" Sebastien Lagarde & Charles de Rousiers)
	midf energyBias	= pixelData.perceptualRoughness * _h( 0.5 );
	midf energyFactor	= lerp( _h( 1.0 ), _h( 1.0 / 1.51 ), pixelData.perceptualRoughness );
	midf fd90			= energyBias + _h( 2.0 ) * VdotH * VdotH * pixelData.perceptualRoughness;
	midf lightScatter	= _h( 1.0 ) + (fd90 - _h( 1.0 )) * pow( _h( 1.0 ) - NdotL, _h( 5.0 ) );
	midf viewScatter	= _h( 1.0 ) + (fd90 - _h( 1.0 )) * pow( _h( 1.0 ) - pixelData.NdotV, _h( 5.0 ) );

	@property( fresnel_has_diffuse )
		@property( fresnel_separate_diffuse )
			float_fresnel fresnelD = @insertpiece( getDiffuseFresnel );
		@else
			midf fresnelD = _h( 1.0f ) - @insertpiece( getMaxFresnelS );
		@end
	@else
		midf fresnelD = _h( 1.0f );
	@end

	//We should divide Rd by PI, but it is already included in kD
	midf3 Rd = (lightScatter * viewScatter * energyFactor * fresnelD) * pixelData.diffuse.xyz;

	@property( clear_coat )
		midf3 color = Rd + Rs;

		midf Fcc;
		midf clearCoat = clearCoatLobe(pixelData, halfWay, NdotH, VdotH, Fcc);
		midf attenuation = _h( 1.0 ) - Fcc;

		@property( normal_map )
			color *= attenuation * NdotL;

			// If the material has a normal map, we want to use the geometric normal
			// instead to avoid applying the normal map details to the clear coat layer
			midf clearCoatNoL = saturate(dot(pixelData.geomNormal, lightDir));
			color += clearCoat * clearCoatNoL;

			return color * lightSpecular;
		@else
			color *= attenuation;
			color += clearCoat;

			return color * lightSpecular * NdotL;
		@end
	@else
		return NdotL * (Rs * lightSpecular + Rd * lightDiffuse);
	@end
}
@end
@end

@property( hlms_enable_vpls )
@piece( DeclareBRDF_InstantRadiosity )
//Simplified cheap BRDF for Instant Radiosity.
midf3 BRDF_IR( midf3 lightDir, midf3 lightDiffuse, PixelData pixelData )
{
	midf NdotL = saturate( dot( pixelData.normal, lightDir ) );
    float_fresnel fresnelD = @insertpiece( getDiffuseFresnel );

	//We should divide Rd by PI, but it is already included in kD
    return NdotL * fresnelD * pixelData.diffuse.xyz * lightDiffuse;
}
@end
@end

/// Applying Fresnel term to prefiltered cubemap has a bad effect of always showing high specular
/// color at edge, even for rough surface. See https://seblagarde.wordpress.com/2011/08/17/hello-world/
/// and see http://www.ogre3d.org/forums/viewtopic.php?f=25&p=523550#p523544
/// "The same Fresnel term which is appropriate for unfiltered environment maps (i.e. perfectly smooth
/// mirror surfaces) is not appropriate for filtered environment maps since there you are averaging
/// incoming light colors from many directions, but using a single Fresnel value computed for the
///	reflection direction. The correct function has similar values as the regular Fresnel expression
/// at v=n, but at glancing angle it behaves differently. In particular, the lerp(from base specular
/// to white) does not go all the way to white at glancing angles in the case of rough surfaces."
/// So we use getSpecularFresnelWithRoughness instead.
@piece( BRDF_EnvMap )
	//Normally we'd use VdotH. However:
	//	H = normalize(lightDir + viewDir)
	//since:
	//	lightDir = pixelData.reflDir
	//then:
	//	H = geomNormal
	//Thus H = N, and therefore we use VdotN (NdotV)
	//float VdotH = saturate( dot( pixelData.viewDir, normalize( pixelData.reflDir + pixelData.viewDir ) ) );
	float_fresnel fresnelS = @insertpiece( getSpecularFresnelWithRoughness );

	@property( ltc_texture_available )
		#define brdfLUT ltcMatrix
		midf3 envBRDF = OGRE_SampleArray2DF16( brdfLUT, ltcSampler,
											   float2( pixelData.NdotV,
													   1.0 - pixelData.perceptualRoughness ), 2 ).xyz;
	@else
		midf3 envBRDF = midf3_c( 1.0f, 0.0f, 1.0f );
	@end

	@property( fresnel_has_diffuse )
		@property( fresnel_separate_diffuse )
			midf NdotL = saturate( dot( pixelData.normal, pixelData.reflDir ) );
			float_fresnel fresnelD = @insertpiece( getDiffuseFresnelWithRoughness );
		@else
			midf fresnelD = _h( 1.0f ) - @insertpiece( getMaxFresnelS );
		@end
	@else
		midf fresnelD = _h( 1.0f );
	@end

        midf3 Rd = pixelData.envColourD * pixelData.diffuse.xyz * _h( 3.141592654 ) * fresnelD * envBRDF.z;
        midf3 Rs = pixelData.envColourS * pixelData.specular.xyz *
    @property( industry_compatible )
                    ( pixelData.F0 * envBRDF.x + envBRDF.y );
    @else
                    ( fresnelS * envBRDF.x + envBRDF.y );
    @end

	@property( clear_coat )
		@property( normal_map )
			// We want to use the geometric normal for the clear coat layer
			float clearCoatNoV = saturate(dot(pixelData.geomNormal, pixelData.viewDir));
		@else
			float clearCoatNoV = pixelData.NdotV;
		@end
		// The clear coat layer assumes an IOR of 1.5 (4% reflectance)
		float Fc = F_Schlick(0.04, 1.0, clearCoatNoV) * pixelData.clearCoat;
		float attenuation = 1.0 - Fc;
		Rd *= attenuation;
		Rs *= attenuation;

		@property( ltc_texture_available )
			midf3 clearCoatEnvBRDF = OGRE_SampleArray2DF16( brdfLUT, ltcSampler,
															float2( clearCoatNoV,
																	1.0 - pixelData.clearCoatPerceptualRoughness ), 2 ).xyz;
		@else
			midf3 clearCoatEnvBRDF = midf3_c( 1.0f, 0.0f, 1.0f );
		@end

		Rs += pixelData.clearCoatEnvColourS * pixelData.specular.xyz * ( _h( 0.04 ) * clearCoatEnvBRDF.x + clearCoatEnvBRDF.y ) * pixelData.clearCoat;
	@end

	finalColour += Rd + Rs;
@end

@property( hlms_fine_light_mask || hlms_forwardplus_fine_light_mask )
    @property( syntax == metal )
        @piece( DeclareObjLightMask )uint objLightMask = inPs.objLightMask;@end
    @else
        @piece( DeclareObjLightMask )uint objLightMask = worldMaterialIdx[inPs.drawId].z;@end
    @end
@end

@property( hlms_fine_light_mask )
    @property( syntax != hlsl )
        @piece( ObjLightMaskCmp )if( (objLightMask & floatBitsToUint( light0Buf.lights[@counter(fineMaskLightIdx)].position.w )) != 0u )@end
        @property( hlms_static_branch_lights )
            @piece( ObjLightMaskCmpNonCasterLoop )if( (objLightMask & floatBitsToUint( light0Buf.lights[@value(fineMaskLightIdx) + i].position.w )) != 0u )@end
            @piece( ObjLightMaskCmpNonCasterLoopEnd )@add( fineMaskLightIdx, hlms_lights_directional_non_caster )@end
        @end
        @piece( andObjLightMaskCmp )&& ((objLightMask & floatBitsToUint( light0Buf.lights[@counter(fineMaskLightIdx)].position.w )) != 0u)@end
        @property( hlms_static_branch_shadow_map_lights )
            @piece( andObjLightMaskCmp_light_idx )&& ((objLightMask & floatBitsToUint( light0Buf.lights[light_idx].position.w )) != 0u)@end
        @end
        @piece( andObjAreaApproxLightMaskCmp )&& ((objLightMask & floatBitsToUint( light1Buf.areaApproxLights[i].position.w )) != 0u)@end
        @piece( andObjAreaLtcLightMaskCmp )&& ((objLightMask & floatBitsToUint( light2Buf.areaLtcLights[i].position.w )) != 0u)@end
    @else
        @piece( ObjLightMaskCmp )if( (objLightMask & light0Buf.lights[@counter(fineMaskLightIdx)].lightMask) != 0u )@end
        @property( hlms_static_branch_lights )
            @piece( ObjLightMaskCmpNonCasterLoop )if( (objLightMask & light0Buf.lights[@value(fineMaskLightIdx) + i].lightMask) != 0u )@end
            @piece( ObjLightMaskCmpNonCasterLoopEnd )@add( fineMaskLightIdx, hlms_lights_directional_non_caster )@end
        @end
        @piece( andObjLightMaskCmp )&& ((objLightMask & light0Buf.lights[@counter(fineMaskLightIdx)].lightMask) != 0u)@end
        @property( hlms_static_branch_shadow_map_lights )
            @piece( andObjLightMaskCmp_light_idx )&& ((objLightMask & light0Buf.lights[light_idx].lightMask) != 0u)@end
        @end
        @piece( andObjAreaApproxLightMaskCmp )&& ((objLightMask & light1Buf.areaApproxLights[i].lightMask) != 0u)@end
        @piece( andObjAreaLtcLightMaskCmp )&& ((objLightMask & light2Buf.areaLtcLights[i].lightMask) != 0u)@end
    @end
@end
