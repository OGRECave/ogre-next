@piece( TerraMaterialStructDecl )
//Uniforms that change per Item/Entity, but change very infrequently
struct Material
{
	/* kD is already divided by PI to make it energy conserving.
	  (formula is finalDiffuse = NdotL * surfaceDiffuse / PI)
	*/
	float4 kD; //kD.w is shadowConstantBias
	float4 roughness;
	float4 metalness;
	float4 detailOffsetScale[4];

	@property( syntax != metal )
		uint4 indices0_7;
		uint4 indices8_15;
		uint4 indices16_24;
	@else
		ushort diffuseIdx;
		ushort weightMapIdx;
		ushort detailMapIdx0;
		ushort detailMapIdx1;
		ushort detailMapIdx2;
		ushort detailMapIdx3;
		ushort detailNormMapIdx0;
		ushort detailNormMapIdx1;
		ushort detailNormMapIdx2;
		ushort detailNormMapIdx3;
		ushort detailRoughnessIdx0;
		ushort detailRoughnessIdx1;
		ushort detailRoughnessIdx2;
		ushort detailRoughnessIdx3;
		ushort detailMetalnessIdx0;
		ushort detailMetalnessIdx1;
		ushort detailMetalnessIdx2;
		ushort detailMetalnessIdx3;
		ushort envMapIdx;
	@end

	@insertpiece( custom_materialBuffer )
};

	@property( syntax != metal )
		CONST_BUFFER( MaterialBuf, 1 )
		{
			Material materialArray[1];
		};
	@end
@end

@property( syntax == metal )
	@piece( TerraMaterialDecl )
		, constant Material *materialArray [[buffer(CONST_SLOT_START+1)]]
	@end
@end

@piece( TerraInstanceStructDecl )
struct CellData
{
	//.x = numVertsPerLine
	//.y = lodLevel
	//.z = vao->getPrimitiveCount() / m_verticesPerLine - 2u
	//.w = skirtY (float)
	uint4 numVertsPerLine;
	int4  xzTexPosBounds;		//XZXZ
	float4 pos;		//.w contains 1.0 / xzTexPosBounds.z
	float4 scale;	//.w contains 1.0 / xzTexPosBounds.w
};
	@property( syntax != metal )
		//Uniforms that change per Item/Entity
		CONST_BUFFER( InstanceBuffer, 2 )
		{
			CellData cellDataArray[256];
		};
	@end
@end

@property( syntax == metal )
	@piece( TerraInstanceDecl )
		, constant CellData *cellDataArray [[buffer(CONST_SLOT_START+2)]]
	@end
@end

//Reset texcoord to 0 for every shader stage (since values are preserved).
@pset( texcoord, 0 )

@piece( Terra_VStoPS_block )
	INTERPOLANT( float3 pos, @counter(texcoord) );
	INTERPOLANT( float2 uv0, @counter(texcoord) );

	@property( detail_triplanar )
		INTERPOLANT( float3 worldPos, @counter(texcoord) );
	@end

	@insertpiece( VStoPS_block )
@end

@undefpiece( DeclareObjLightMask )
@property( hlms_fine_light_mask || hlms_forwardplus_fine_light_mask )
	@property( syntax == metal )
		@piece( DeclareObjLightMask )uint objLightMask = 0xFFFFFFFFu;@end
	@else
		@piece( DeclareObjLightMask )uint objLightMask = 0xFFFFFFFFu;@end
	@end
@end
