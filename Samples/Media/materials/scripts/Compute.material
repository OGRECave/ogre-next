shared_params switches
{
        shared_param_named awesome bool true
}

shared_params colors
{
        shared_param_named R float 1.0
        // shared_param_named GB float2 0.0 1.0
}

shared_params more_switches
{
        shared_param_named more_awesome bool false
}

//shared_params counters

//////////
// HLSL //
//////////

//TODO Implement me.
// vertex_program Compute/VS_HLSL hlsl
// {
//         source Compute.hlsl
//         entry_point mainVS
//         target vs_4_0

//         default_params
//         {
//                 param_named_auto WorldViewProj worldviewproj_matrix
//         }
// }

// geometry_program Compute/GS_HLSL hlsl
// {
//         source Compute.hlsl
//         entry_point mainGS
//         target gs_4_0

//         default_params
//         {
//                 param_named IsoValue float 1
//         }
// }

// fragment_program Compute/PS_HLSL hlsl
// {
//         source Compute.hlsl
//         entry_point mainPS
//         target ps_4_0
// }

//////////
//  CG  //
//////////

// As of CG 3.1, compute shaders are not yet supported.

// vertex_program Compute/VS_CG cg
// {
//         source Compute.cg
//         entry_point mainVS
//         profiles vp40 arbvp1

//         default_params
//         {
//                 param_named_auto WorldViewProj worldviewproj_matrix
//         }
// }

// geometry_program Compute/GS_CG cg
// {
//         source Compute.cg
//         entry_point mainGS
//         profiles gpu_gp gp4_gp

//         default_params
//         {
//             param_named IsoValue float 1
//         }
// }

// fragment_program Compute/PS_CG cg
// {
//         source Compute.cg
//         entry_point mainPS
//         profiles fp40 arbfp1
// }

//////////
// GLSL //
//////////
compute_program Compute/CS_GLSL glsl
{
        source ComputeCS.glsl
        syntax glsl430
        compute_group_dimensions 32 1 1
        //TODO is this necessary?
        // placement postrender
        //TODO how to handle glMemoryBarrier?
        // do other programs need to support this?
        // should be able to handle multiple barriers via bit ops
        // pre_memory_barrier texture
        // post_memory_barrier texture

        default_params
        {
            param_named multiplier float 10.0
        }
}

vertex_program Compute/VS_GLSL glsl
{
        source ComputeVS.glsl
        syntax glsl150

        default_params
        {
            param_named_auto WorldViewProj worldviewproj_matrix
        }
}

geometry_program Compute/GS_GLSL glsl
{
        source ComputeGS.glsl
        syntax glsl150

        default_params
        {
            param_named_auto WorldViewProj worldviewproj_matrix
        }
}

fragment_program Compute/PS_GLSL glsl
{
        source ComputeFS.glsl
        syntax glsl430

        default_params
        {
            shared_params_ref switches
            shared_params_ref more_switches
            param_named atom_counter uint 10
            param_named pretty_colours bool false
            param_named image_load_store bool false
            param_named colour_factor uint[3] 50 50 100
        }
}

compute_program Compute/CS unified
{
        delegate Compute/CS_GLSL
        // delegate Compute/CS_HLSL
        // delegate Compute/CS_CG
}

vertex_program Compute/VS unified
{
        delegate Compute/VS_GLSL
        // delegate Compute/VS_HLSL
        // delegate Compute/VS_CG
}

geometry_program Compute/GS unified
{
        delegate Compute/GS_GLSL
        // delegate Compute/GS_HLSL
        // delegate Compute/GS_CG
}

fragment_program Compute/PS unified
{
        delegate Compute/PS_GLSL
        // delegate Compute/PS_HLSL
        // delegate Compute/PS_CG
}

material Compute
{
        technique
        {
                pass
                {
                    texture_unit
                    {
                      texture data.csv
                      image_bind 0 read X8R8B8G8
                    }

                        compute_program_ref Compute/CS
                        {

                        }

                        vertex_program_ref Compute/VS
                        {

                        }

                        // tessellation_hull_program_ref Compute/THS
                        // {

                        // }

                        // tessellation_domain_program_ref Compute/TDS
                        // {

                        // }

                        geometry_program_ref Compute/GS
                        {

                        }

                        fragment_program_ref Compute/PS
                        {

                        }
                }
        }
}
