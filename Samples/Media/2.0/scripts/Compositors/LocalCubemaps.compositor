abstract target cubemap_target
{
	pass render_scene
	{
		load
		{
			all				clear
			clear_colour	0.2 0.4 0.6 1
		}
		store
		{
			//We DO care about the contents of depth for the depth compressor
			depth			store
			stencil			dont_care
		}

		//Filter stuff that shouldn't be reflected (vampires?)
		visibility_mask		0x00000005
		overlays			off
		camera_cubemap_reorient true

		rq_first	0
		rq_last		250

		//We want very accurate shadows in the reflections and Ogre seems to
		//be unable to detect for each pass shadows should be recalculated,
		//so force it.
		shadows LocalCubemapsShadowNode recalculate
	}

	//Render sky (see TutorialSky_Postprocess)
	/*pass render_quad
	{
		store
		{
			//We only care about the contents of the colour target
			depth			dont_care
			stencil			dont_care
		}

		quad_normals	camera_direction
		material SkyPostprocess
		camera_cubemap_reorient true
	}*/
}

abstract target pcc_depth_compress
{
	pass render_quad
	{
		store
		{
			depth	dont_care
			stencil	dont_care
		}

		quad_normals	camera_far_corners_view_space
		material		PCC/DepthCompressor

		input			0 depthTexture

		camera_cubemap_reorient true
	}
}

compositor_node LocalCubemapProbeRendererNode
{
	in 0 cubemap
	in 1 ibl_output

	texture depthTexture	target_width target_height PFG_D32_FLOAT

	rtv cubemap_customRtv
	{
		colour	cubemap
		depth	depthTexture
	}
	rtv cubemap_noDepth
	{
		colour		cubemap
		depth_pool	0
	}

	target cubemap_customRtv	+X : cubemap_target { }
	target cubemap_noDepth		+X : pcc_depth_compress { }
	target cubemap_customRtv	-X : cubemap_target { }
	target cubemap_noDepth		-X : pcc_depth_compress { }
	target cubemap_customRtv	+Y : cubemap_target { }
	target cubemap_noDepth		+Y : pcc_depth_compress { }
	target cubemap_customRtv	-Y : cubemap_target { }
	target cubemap_noDepth		-Y : pcc_depth_compress { }
	target cubemap_customRtv	+Z : cubemap_target { }
	target cubemap_noDepth		+Z : pcc_depth_compress { }
	target cubemap_customRtv	-Z : cubemap_target { }
	target cubemap_noDepth		-Z : pcc_depth_compress
	{
		pass ibl_specular
		{
			input cubemap
			output ibl_output
		}
	}
}

compositor_node LocalCubemapsRenderingNode
{
	in 0 rt_renderwindow
	//in 1 demo_dynamic_cubemap

	target rt_renderwindow
	{
		pass render_scene
		{
			load
			{
				all				clear
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				//Overlays in the next pass interrupt rendering in Metal/iOS, thus without
				//"colour store" MSAA won't work properly.
				colour	store
				depth	dont_care
				stencil	dont_care
			}

			//Our materials in this pass will be using this cubemap,
			//so we need to expose it to the pass.
			//Note: Even if it "just works" without exposing, the reason for
			//exposing is to ensure compatibility with Vulkan & D3D12.
			//expose demo_dynamic_cubemap

			shadows		LocalCubemapsShadowNode

			//RQ 250 is where the helper geometry from PCC lives; therefore we must not render and we avoid it.
			//We could also use visibility_mask for that.
			rq_first	0
			rq_last		250
		}

		//Render overlays
		pass render_scene
		{
			store
			{
				depth	dont_care
				stencil	dont_care
			}
			//Set a shadow node so Forward+ can reuse the cache from
			//the previous render_scene pass
			shadows		LocalCubemapsShadowNode reuse
			rq_first	251
		}

		//Render sky (see TutorialSky_Postprocess)
		/*pass render_quad
		{
			store
			{
				depth	dont_care
				stencil	dont_care
			}
			quad_normals	camera_direction
			material SkyPostprocess
		}

		//Render transparent stuff after sky
		pass render_scene
		{
			store
			{
				depth	dont_care
				stencil	dont_care
			}
			overlays	on
			rq_first	2
		}*/
	}
}

abstract target cubemap_target_shadow
{
	pass render_scene
	{
		load
		{
			all									clear
			clear_colour_reverse_depth_aware	1 1 1 1
		}
		store
		{
			//We only care about the contents of the colour target with point shadows
			depth			dont_care
			stencil			dont_care
		}
		camera_cubemap_reorient true
	}
}

compositor_node_shadow LocalCubemapsShadowNode
{
	technique pssm

	texture atlas		2048 7168 PFG_D32_FLOAT
	texture tmpCubemap	1024 1024 PFG_R32_FLOAT cubemap depth_format PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.0 0.000000000000000 1.0 0.285714285714286 light 0 split 0
	shadow_map 1 atlas uv 0.0 0.285714285714286 0.5 0.142857142857143 light 0 split 1
	shadow_map 2 atlas uv 0.5 0.285714285714286 0.5 0.142857142857143 light 0 split 2

	technique focused
	shadow_map 3 atlas uv 0.0 0.428571428571429 1.0 0.285714285714286 light 1
	shadow_map 4 atlas uv 0.0 0.714285714285714 1.0 0.285714285714286 light 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type point
	{
		shadow_map_repeat 3 4
		{
			target tmpCubemap +X : cubemap_target_shadow {}
			target tmpCubemap -X : cubemap_target_shadow {}
			target tmpCubemap +Y : cubemap_target_shadow {}
			target tmpCubemap -Y : cubemap_target_shadow {}
			target tmpCubemap +Z : cubemap_target_shadow {}
			target tmpCubemap -Z : cubemap_target_shadow {}

			shadow_map
			{
				pass render_quad
				{
					material Ogre/DPSM/CubeToDpsm
					input 0 tmpCubemap
				}
			}
		}
	}
}

workspace LocalCubemapsWorkspace
{
	//Render Window on channel #0
	connect_external 0 LocalCubemapsRenderingNode 0
	//Cubemap on channel #1
	//connect_external 1 LocalCubemapsRenderingNode 1
}

workspace LocalCubemapsProbeWorkspace
{
	connect_external 0 LocalCubemapProbeRendererNode 0
	connect_external 1 LocalCubemapProbeRendererNode 1
}
