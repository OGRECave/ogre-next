compositor_node TutorialComputeTest02_UavBufferRenderingNode
{
	in 0 rt_renderwindow
	//in_buffer 0 inputBuffer

	//buffer name size bytesPerElement [target_width] [target_height] bind_flags
	buffer testBuffer 1 4 target_width target_height
	
	target
	{
		pass compute
		{
			job	TestJob

			//input 0 mrtTexture 1
			//uav_buffer # bufferName offset_start size read write allow_write_after_write
			uav_buffer 0 testBuffer write
		}
	}

	target rt_renderwindow
	{
		//The bindings made by pass bind_uav PERSIST even after we're out of rt_renderwindow.
		pass bind_uav
		{
			load
			{
				all		dont_care
			}
			store
			{
				depth	dont_care
				stencil	dont_care
			}

			starting_slot 1
			uav_buffer 0 testBuffer			read
		}

		//Compositor will issue the appropiate barriers because
		//it knows testTexture will be used as a texture.
		pass render_quad
		{
			load
			{
				all		dont_care
			}
			store
			{
				depth	dont_care
				stencil	dont_care
			}

			material DrawFromUavBuffer
			uses_uav 0 read
		}

		pass render_scene
		{
			// We must set depth & stencil to dont_care because the
			// Window's DepthBuffer is Memoryless by default and Overlays break the pass.
			load
			{
				depth	clear
				stencil	clear
			}
			store
			{
				depth	dont_care
				stencil	dont_care
			}

			overlays	on
		}
	}
	
	//out_buffer 0 outputBuffer
}

workspace TutorialComputeTest02_UavBufferWorkspace
{
	connect_output TutorialComputeTest02_UavBufferRenderingNode 0
}
